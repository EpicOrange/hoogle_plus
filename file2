(declare-datatypes ((Type 0)) ((Type (list (list1 Type)) (maybe (maybe1 Type)) (a))))
(declare-fun p0 () (Array Type Int))
(declare-fun p1 () (Array Type Int))
(declare-fun Data.Maybe.catMaybes0 () Bool)
(declare-fun p2 () (Array Type Int))
(declare-fun Data.Maybe.catMaybes1 () Bool)
(declare-fun p3 () (Array Type Int))
(declare-fun Data.Maybe.catMaybes2 () Bool)
(declare-fun Data.Maybe.fromMaybe0 () Bool)
(declare-fun Data.Maybe.fromMaybe1 () Bool)
(declare-fun Data.Maybe.fromMaybe2 () Bool)
(declare-fun Data.Maybe.listToMaybe0 () Bool)
(declare-fun Data.Maybe.listToMaybe1 () Bool)
(declare-fun Data.Maybe.listToMaybe2 () Bool)
(assert (=> Data.Maybe.catMaybes0
    (exists ((x!1 Type))
      (let ((a!1 (store p0 (list x!1) (+ (select p0 (list x!1)) 1)))
            (a!2 (+ (select p0 (list (maybe x!1))) (- 1)))
            (a!4 (>= (select p0 (list (maybe x!1))) 1)))
      (let ((a!3 (= p1 (store a!1 (list (maybe x!1)) a!2))))
        (and a!3 a!4))))))
(assert (=> Data.Maybe.catMaybes1
    (exists ((x!1 Type))
      (let ((a!1 (store p1 (list x!1) (+ (select p1 (list x!1)) 1)))
            (a!2 (+ (select p1 (list (maybe x!1))) (- 1)))
            (a!4 (>= (select p1 (list (maybe x!1))) 1)))
      (let ((a!3 (= p2 (store a!1 (list (maybe x!1)) a!2))))
        (and a!3 a!4))))))
(assert (=> Data.Maybe.catMaybes2
    (exists ((x!1 Type))
      (let ((a!1 (store p2 (list x!1) (+ (select p2 (list x!1)) 1)))
            (a!2 (+ (select p2 (list (maybe x!1))) (- 1)))
            (a!4 (>= (select p2 (list (maybe x!1))) 1)))
      (let ((a!3 (= p3 (store a!1 (list (maybe x!1)) a!2))))
        (and a!3 a!4))))))
(assert (let ((a!1 (exists ((x!1 Type))
             (let ((a!1 (store p0 (maybe x!1) (+ (select p0 (maybe x!1)) (- 1)))))
               (and (= p1 a!1)
                    (>= (select p0 (maybe x!1)) 1)
                    (>= (select p0 x!1) 1))))))
  (=> Data.Maybe.fromMaybe0 a!1)))
(assert (let ((a!1 (exists ((x!1 Type))
             (let ((a!1 (store p1 (maybe x!1) (+ (select p1 (maybe x!1)) (- 1)))))
               (and (= p2 a!1)
                    (>= (select p1 (maybe x!1)) 1)
                    (>= (select p1 x!1) 1))))))
  (=> Data.Maybe.fromMaybe1 a!1)))
(assert (let ((a!1 (exists ((x!1 Type))
             (let ((a!1 (store p2 (maybe x!1) (+ (select p2 (maybe x!1)) (- 1)))))
               (and (= p3 a!1)
                    (>= (select p2 (maybe x!1)) 1)
                    (>= (select p2 x!1) 1))))))
  (=> Data.Maybe.fromMaybe2 a!1)))
(assert (let ((a!1 (exists ((x!1 Type))
             (let ((a!1 (store p0 (maybe x!1) (+ (select p0 (maybe x!1)) 1))))
             (let ((a!2 (store a!1 (list x!1) (+ (select p0 (list x!1)) (- 1)))))
               (and (= p1 a!2) (>= (select p0 (list x!1)) 1)))))))
  (=> Data.Maybe.listToMaybe0 a!1)))
(assert (let ((a!1 (exists ((x!1 Type))
             (let ((a!1 (store p1 (maybe x!1) (+ (select p1 (maybe x!1)) 1))))
             (let ((a!2 (store a!1 (list x!1) (+ (select p1 (list x!1)) (- 1)))))
               (and (= p2 a!2) (>= (select p1 (list x!1)) 1)))))))
  (=> Data.Maybe.listToMaybe1 a!1)))
(assert (let ((a!1 (exists ((x!1 Type))
             (let ((a!1 (store p2 (maybe x!1) (+ (select p2 (maybe x!1)) 1))))
             (let ((a!2 (store a!1 (list x!1) (+ (select p2 (list x!1)) (- 1)))))
               (and (= p3 a!2) (>= (select p2 (list x!1)) 1)))))))
  (=> Data.Maybe.listToMaybe2 a!1)))
(assert (let ((a!1 (store (store ((as const (Array Type Int)) 0) (list (maybe a)) 1)
                  a
                  1)))
  (= p0 a!1)))
(assert (= p2 (store (store ((as const (Array Type Int)) 0) (maybe a) 1) a 1)))
(assert (= p3 (store (store ((as const (Array Type Int)) 0) (maybe a) 0) a 1)))
(assert (or Data.Maybe.catMaybes0 Data.Maybe.fromMaybe0 Data.Maybe.listToMaybe0))
(assert (or Data.Maybe.catMaybes1 Data.Maybe.fromMaybe1 Data.Maybe.listToMaybe1))
(assert (or Data.Maybe.catMaybes2 Data.Maybe.fromMaybe2 Data.Maybe.listToMaybe2))
(check-sat)
(get-model)
