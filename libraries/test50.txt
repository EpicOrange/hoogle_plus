@package base
@version 4.12.0.0
-- base
module Data.Word
data Word
data {-# CTYPE "HsWord8" #-} Word8

-- base
module Data.Int
data {-# CTYPE "HsInt64" #-} Int64

-- base
module Data.String
type String = [Char]

-- base
module Data.Maybe
data Maybe a
Nothing :: Maybe a
Just :: a -> Maybe a
isJust :: Maybe a -> Bool
isNothing :: Maybe a -> Bool
fromJust :: Maybe a -> a
fromMaybe :: a -> Maybe a -> a
listToMaybe :: [a] -> Maybe a
maybeToList :: Maybe a -> [a]
catMaybes :: [Maybe a] -> [a]
-- HOF: maybe :: b -> (a -> b) -> Maybe a -> b
-- HOF: mapMaybe :: (a -> Maybe b) -> [a] -> [b]

-- bytestring
module Data.ByteString.Builder
data Builder
intDec :: Int -> Builder
int64BE :: Int64 -> Builder

-- bytestring
module Data.ByteString.Lazy
data ByteString
empty :: ByteString
toLazyByteString :: Builder -> ByteString
reverse :: ByteString -> ByteString
intersperse :: Word8 -> ByteString -> ByteString
intercalate :: ByteString -> [ByteString] -> ByteString
maximum :: ByteString -> Word8
minimum :: ByteString -> Word8
elem :: Word8 -> ByteString -> Bool
notElem :: Word8 -> ByteString -> Bool

-- containers
module Data.Map.Strict
data Map k a
empty :: Map k a
singleton :: k -> a -> Map k a
null :: Map k a -> Bool
size :: Map k a -> Int
elems :: Map k a -> [a]
keys :: Map k a -> [k]
toList :: Map k a -> [(k, a)]
take :: Int -> Map k a -> Map k a
drop :: Int -> Map k a -> Map k a

-- base
module Data.List
(++) :: [a] -> [a] -> [a]
infixr 5 ++
head :: [a] -> a
last :: [a] -> a
tail :: [a] -> [a]
init :: [a] -> [a]
uncons :: [a] -> Maybe (a, [a])
take :: Int -> [a] -> [a]
drop :: Int -> [a] -> [a]
splitAt :: Int -> [a] -> ([a], [a])
inits :: [a] -> [[a]]
tails :: [a] -> [[a]]
zip :: [a] -> [b] -> [(a, b)]
lines :: String -> [String]
words :: String -> [String]
unlines :: [String] -> String
unwords :: [String] -> String

-- base
module Data.Tuple
fst :: (a, b) -> a
snd :: (a, b) -> b
swap :: (a, b) -> (b, a)


