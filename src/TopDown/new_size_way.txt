==================
Starting!
Arguments: fromList [("arg0",a),("arg1",[Maybe (a)])]
Goal: a
==================

running dfsExactly on <a> . (a -> ([Maybe (a)] -> a)) at size 1
(?? :: a)                                                                                                                                   (size 1) goal: a
((?? :: (alpha0 -> a)) (?? :: alpha0))                                                                                                      (size 1) goal: a

running dfsExactly on <a> . (a -> ([Maybe (a)] -> a)) at size 2
(?? :: a)                                                                                                                                   (size 2) goal: a
((?? :: (alpha0 -> a)) (?? :: alpha0))                                                                                                      (size 2) goal: a
((?? :: (alpha0 -> a)) (?? :: alpha0))                                                                                                      (size 1) goal: (alpha0 -> a)
(((?? :: (alpha1 -> (alpha0 -> a))) (?? :: alpha1)) (?? :: alpha0))                                                                         (size 1) goal: (alpha0 -> a)

running dfsExactly on <a> . (a -> ([Maybe (a)] -> a)) at size 3
(?? :: a)                                                                                                                                   (size 3) goal: a
((?? :: (alpha0 -> a)) (?? :: alpha0))                                                                                                      (size 3) goal: a
((?? :: (alpha0 -> a)) (?? :: alpha0))                                                                                                      (size 1) goal: (alpha0 -> a)
(((?? :: (alpha1 -> (alpha0 -> a))) (?? :: alpha1)) (?? :: alpha0))                                                                         (size 1) goal: (alpha0 -> a)
((?? :: (alpha0 -> a)) (?? :: alpha0))                                                                                                      (size 2) goal: (alpha0 -> a)
(((?? :: (alpha1 -> (alpha0 -> a))) (?? :: alpha1)) (?? :: alpha0))                                                                         (size 2) goal: (alpha0 -> a)
(((?? :: (alpha1 -> (alpha0 -> a))) (?? :: alpha1)) (?? :: alpha0))                                                                         (size 1) goal: (alpha1 -> (alpha0 -> a))
((((?? :: (alpha2 -> (alpha1 -> (alpha0 -> a)))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                            (size 1) goal: (alpha1 -> (alpha0 -> a))

running dfsExactly on <a> . (a -> ([Maybe (a)] -> a)) at size 4
(?? :: a)                                                                                                                                   (size 4) goal: a
((?? :: (alpha0 -> a)) (?? :: alpha0))                                                                                                      (size 4) goal: a
((?? :: (alpha0 -> a)) (?? :: alpha0))                                                                                                      (size 1) goal: (alpha0 -> a)
(((?? :: (alpha1 -> (alpha0 -> a))) (?? :: alpha1)) (?? :: alpha0))                                                                         (size 1) goal: (alpha0 -> a)
((?? :: (alpha0 -> a)) (?? :: alpha0))                                                                                                      (size 2) goal: (alpha0 -> a)
(((?? :: (alpha1 -> (alpha0 -> a))) (?? :: alpha1)) (?? :: alpha0))                                                                         (size 2) goal: (alpha0 -> a)
(((?? :: (alpha1 -> (alpha0 -> a))) (?? :: alpha1)) (?? :: alpha0))                                                                         (size 1) goal: (alpha1 -> (alpha0 -> a))
((((?? :: (alpha2 -> (alpha1 -> (alpha0 -> a)))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                            (size 1) goal: (alpha1 -> (alpha0 -> a))
((?? :: (alpha0 -> a)) (?? :: alpha0))                                                                                                      (size 3) goal: (alpha0 -> a)
(((?? :: (alpha1 -> (alpha0 -> a))) (?? :: alpha1)) (?? :: alpha0))                                                                         (size 3) goal: (alpha0 -> a)
(((?? :: (alpha1 -> (alpha0 -> a))) (?? :: alpha1)) (?? :: alpha0))                                                                         (size 1) goal: (alpha1 -> (alpha0 -> a))
((((?? :: (alpha2 -> (alpha1 -> (alpha0 -> a)))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                            (size 1) goal: (alpha1 -> (alpha0 -> a))
(((?? :: (alpha1 -> (alpha0 -> a))) (?? :: alpha1)) (?? :: alpha0))                                                                         (size 2) goal: (alpha1 -> (alpha0 -> a))
((Data.Maybe.fromMaybe (?? :: alpha1)) (?? :: alpha0))                                                                                      (size 2) goal: a
(Data.Maybe.fromMaybe arg0 (?? :: alpha0))                                                                                                  (size 2) goal: Maybe (a)
(Data.Maybe.fromMaybe arg0 ((?? :: (alpha2 -> Maybe (a))) (?? :: alpha2)))                                                                  (size 2) goal: Maybe (a)
(Data.Maybe.fromMaybe arg0 ((?? :: (alpha2 -> Maybe (a))) (?? :: alpha2)))                                                                  (size 1) goal: (alpha2 -> Maybe (a))
((Data.Maybe.fromMaybe ((?? :: (alpha2 -> a)) (?? :: alpha2))) (?? :: alpha0))                                                              (size 2) goal: a
((Data.Maybe.fromMaybe ((?? :: (alpha2 -> a)) (?? :: alpha2))) (?? :: alpha0))                                                              (size 1) goal: (alpha2 -> a)
((GHC.List.foldl1 (?? :: alpha1)) (?? :: alpha0))                                                                                           (size 2) goal: (a -> (a -> a))
((GHC.List.foldl1 (\arg2 -> (?? :: (a -> a)))) (?? :: alpha0))                                                                              (size 1) goal: (a -> a)
((GHC.List.foldl1' (?? :: alpha1)) (?? :: alpha0))                                                                                          (size 2) goal: (a -> (a -> a))
((GHC.List.foldl1' (\arg2 -> (?? :: (a -> a)))) (?? :: alpha0))                                                                             (size 1) goal: (a -> a)
((((?? :: (alpha2 -> (alpha1 -> (alpha0 -> a)))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                            (size 2) goal: (alpha1 -> (alpha0 -> a))
((((?? :: (alpha2 -> (alpha1 -> (alpha0 -> a)))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                            (size 1) goal: (alpha2 -> (alpha1 -> (alpha0 -> a)))
(((((?? :: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))               (size 1) goal: (alpha2 -> (alpha1 -> (alpha0 -> a)))

running dfsExactly on <a> . (a -> ([Maybe (a)] -> a)) at size 5
(?? :: a)                                                                                                                                   (size 5) goal: a
((?? :: (alpha0 -> a)) (?? :: alpha0))                                                                                                      (size 5) goal: a
((?? :: (alpha0 -> a)) (?? :: alpha0))                                                                                                      (size 1) goal: (alpha0 -> a)
(((?? :: (alpha1 -> (alpha0 -> a))) (?? :: alpha1)) (?? :: alpha0))                                                                         (size 1) goal: (alpha0 -> a)
((?? :: (alpha0 -> a)) (?? :: alpha0))                                                                                                      (size 2) goal: (alpha0 -> a)
(((?? :: (alpha1 -> (alpha0 -> a))) (?? :: alpha1)) (?? :: alpha0))                                                                         (size 2) goal: (alpha0 -> a)
(((?? :: (alpha1 -> (alpha0 -> a))) (?? :: alpha1)) (?? :: alpha0))                                                                         (size 1) goal: (alpha1 -> (alpha0 -> a))
((((?? :: (alpha2 -> (alpha1 -> (alpha0 -> a)))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                            (size 1) goal: (alpha1 -> (alpha0 -> a))
((?? :: (alpha0 -> a)) (?? :: alpha0))                                                                                                      (size 3) goal: (alpha0 -> a)
(((?? :: (alpha1 -> (alpha0 -> a))) (?? :: alpha1)) (?? :: alpha0))                                                                         (size 3) goal: (alpha0 -> a)
(((?? :: (alpha1 -> (alpha0 -> a))) (?? :: alpha1)) (?? :: alpha0))                                                                         (size 1) goal: (alpha1 -> (alpha0 -> a))
((((?? :: (alpha2 -> (alpha1 -> (alpha0 -> a)))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                            (size 1) goal: (alpha1 -> (alpha0 -> a))
(((?? :: (alpha1 -> (alpha0 -> a))) (?? :: alpha1)) (?? :: alpha0))                                                                         (size 2) goal: (alpha1 -> (alpha0 -> a))
((Data.Maybe.fromMaybe (?? :: alpha1)) (?? :: alpha0))                                                                                      (size 2) goal: a
(Data.Maybe.fromMaybe arg0 (?? :: alpha0))                                                                                                  (size 3) goal: Maybe (a)
(Data.Maybe.fromMaybe arg0 ((?? :: (alpha2 -> Maybe (a))) (?? :: alpha2)))                                                                  (size 3) goal: Maybe (a)
(Data.Maybe.fromMaybe arg0 ((?? :: (alpha2 -> Maybe (a))) (?? :: alpha2)))                                                                  (size 1) goal: (alpha2 -> Maybe (a))
(Data.Maybe.fromMaybe arg0 ((?? :: (alpha2 -> Maybe (a))) (?? :: alpha2)))                                                                  (size 2) goal: (alpha2 -> Maybe (a))
(Data.Maybe.fromMaybe arg0 (((?? :: (alpha3 -> (alpha2 -> Maybe (a)))) (?? :: alpha3)) (?? :: alpha2)))                                     (size 2) goal: (alpha2 -> Maybe (a))
(Data.Maybe.fromMaybe arg0 (((?? :: (alpha3 -> (alpha2 -> Maybe (a)))) (?? :: alpha3)) (?? :: alpha2)))                                     (size 1) goal: (alpha3 -> (alpha2 -> Maybe (a)))
((Data.Maybe.fromMaybe ((?? :: (alpha2 -> a)) (?? :: alpha2))) (?? :: alpha0))                                                              (size 2) goal: a
((Data.Maybe.fromMaybe ((?? :: (alpha2 -> a)) (?? :: alpha2))) (?? :: alpha0))                                                              (size 1) goal: (alpha2 -> a)
((GHC.List.foldl1 (?? :: alpha1)) (?? :: alpha0))                                                                                           (size 2) goal: (a -> (a -> a))
((GHC.List.foldl1 (\arg2 -> (?? :: (a -> a)))) (?? :: alpha0))                                                                              (size 1) goal: (a -> a)
((GHC.List.foldl1' (?? :: alpha1)) (?? :: alpha0))                                                                                          (size 2) goal: (a -> (a -> a))
((GHC.List.foldl1' (\arg2 -> (?? :: (a -> a)))) (?? :: alpha0))                                                                             (size 1) goal: (a -> a)
((((?? :: (alpha2 -> (alpha1 -> (alpha0 -> a)))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                            (size 2) goal: (alpha1 -> (alpha0 -> a))
((((?? :: (alpha2 -> (alpha1 -> (alpha0 -> a)))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                            (size 1) goal: (alpha2 -> (alpha1 -> (alpha0 -> a)))
(((((?? :: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))               (size 1) goal: (alpha2 -> (alpha1 -> (alpha0 -> a)))
((?? :: (alpha0 -> a)) (?? :: alpha0))                                                                                                      (size 4) goal: (alpha0 -> a)
(((?? :: (alpha1 -> (alpha0 -> a))) (?? :: alpha1)) (?? :: alpha0))                                                                         (size 4) goal: (alpha0 -> a)
(((?? :: (alpha1 -> (alpha0 -> a))) (?? :: alpha1)) (?? :: alpha0))                                                                         (size 1) goal: (alpha1 -> (alpha0 -> a))
((((?? :: (alpha2 -> (alpha1 -> (alpha0 -> a)))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                            (size 1) goal: (alpha1 -> (alpha0 -> a))
(((?? :: (alpha1 -> (alpha0 -> a))) (?? :: alpha1)) (?? :: alpha0))                                                                         (size 2) goal: (alpha1 -> (alpha0 -> a))
((Data.Maybe.fromMaybe (?? :: alpha1)) (?? :: alpha0))                                                                                      (size 3) goal: a
((Data.Maybe.fromMaybe ((?? :: (alpha2 -> a)) (?? :: alpha2))) (?? :: alpha0))                                                              (size 3) goal: a
((Data.Maybe.fromMaybe ((?? :: (alpha2 -> a)) (?? :: alpha2))) (?? :: alpha0))                                                              (size 1) goal: (alpha2 -> a)
((Data.Maybe.fromMaybe ((?? :: (alpha2 -> a)) (?? :: alpha2))) (?? :: alpha0))                                                              (size 2) goal: (alpha2 -> a)
((Data.Maybe.fromMaybe (((?? :: (alpha3 -> (alpha2 -> a))) (?? :: alpha3)) (?? :: alpha2))) (?? :: alpha0))                                 (size 2) goal: (alpha2 -> a)
((Data.Maybe.fromMaybe (((?? :: (alpha3 -> (alpha2 -> a))) (?? :: alpha3)) (?? :: alpha2))) (?? :: alpha0))                                 (size 1) goal: (alpha3 -> (alpha2 -> a))
((GHC.List.foldl1 (?? :: alpha1)) (?? :: alpha0))                                                                                           (size 3) goal: (a -> (a -> a))
((GHC.List.foldl1 (\arg2 -> (?? :: (a -> a)))) (?? :: alpha0))                                                                              (size 2) goal: (a -> a)
((GHC.List.foldl1 (\arg2 -> (\arg3 -> (?? :: a)))) (?? :: alpha0))                                                                          (size 1) goal: a
((GHC.List.foldl1' (?? :: alpha1)) (?? :: alpha0))                                                                                          (size 3) goal: (a -> (a -> a))
((GHC.List.foldl1' (\arg2 -> (?? :: (a -> a)))) (?? :: alpha0))                                                                             (size 2) goal: (a -> a)
((GHC.List.foldl1' (\arg2 -> (\arg3 -> (?? :: a)))) (?? :: alpha0))                                                                         (size 1) goal: a
((((?? :: (alpha2 -> (alpha1 -> (alpha0 -> a)))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                            (size 2) goal: (alpha1 -> (alpha0 -> a))
((((?? :: (alpha2 -> (alpha1 -> (alpha0 -> a)))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                            (size 1) goal: (alpha2 -> (alpha1 -> (alpha0 -> a)))
(((((?? :: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))               (size 1) goal: (alpha2 -> (alpha1 -> (alpha0 -> a)))
(((?? :: (alpha1 -> (alpha0 -> a))) (?? :: alpha1)) (?? :: alpha0))                                                                         (size 3) goal: (alpha1 -> (alpha0 -> a))
((((?? :: (alpha2 -> (alpha1 -> (alpha0 -> a)))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                            (size 3) goal: (alpha1 -> (alpha0 -> a))
((((?? :: (alpha2 -> (alpha1 -> (alpha0 -> a)))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                            (size 1) goal: (alpha2 -> (alpha1 -> (alpha0 -> a)))
(((((?? :: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))               (size 1) goal: (alpha2 -> (alpha1 -> (alpha0 -> a)))
((((?? :: (alpha2 -> (alpha1 -> (alpha0 -> a)))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                            (size 2) goal: (alpha2 -> (alpha1 -> (alpha0 -> a)))
(((GHC.List.foldl (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                                                           (size 2) goal: (a -> (tauGHC.List.foldl1 -> a))
(((GHC.List.foldl (\arg2 -> (?? :: (tauGHC.List.foldl1 -> a)))) (?? :: alpha1)) (?? :: alpha0))                                             (size 1) goal: (tauGHC.List.foldl1 -> a)
(((GHC.List.foldl' (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                                                          (size 2) goal: (a -> (tauGHC.List.foldl'1 -> a))
(((GHC.List.foldl' (\arg2 -> (?? :: (tauGHC.List.foldl'1 -> a)))) (?? :: alpha1)) (?? :: alpha0))                                           (size 1) goal: (tauGHC.List.foldl'1 -> a)
(((((?? :: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))               (size 2) goal: (alpha2 -> (alpha1 -> (alpha0 -> a)))
(((((?? :: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))               (size 1) goal: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))
((((((?? :: (alpha4 -> (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a)))))) (?? :: alpha4)) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))(size 1) goal: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))

running dfsExactly on <a> . (a -> ([Maybe (a)] -> a)) at size 6
(?? :: a)                                                                                                                                   (size 6) goal: a
((?? :: (alpha0 -> a)) (?? :: alpha0))                                                                                                      (size 6) goal: a
((?? :: (alpha0 -> a)) (?? :: alpha0))                                                                                                      (size 1) goal: (alpha0 -> a)
(((?? :: (alpha1 -> (alpha0 -> a))) (?? :: alpha1)) (?? :: alpha0))                                                                         (size 1) goal: (alpha0 -> a)
((?? :: (alpha0 -> a)) (?? :: alpha0))                                                                                                      (size 2) goal: (alpha0 -> a)
(((?? :: (alpha1 -> (alpha0 -> a))) (?? :: alpha1)) (?? :: alpha0))                                                                         (size 2) goal: (alpha0 -> a)
(((?? :: (alpha1 -> (alpha0 -> a))) (?? :: alpha1)) (?? :: alpha0))                                                                         (size 1) goal: (alpha1 -> (alpha0 -> a))
((((?? :: (alpha2 -> (alpha1 -> (alpha0 -> a)))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                            (size 1) goal: (alpha1 -> (alpha0 -> a))
((?? :: (alpha0 -> a)) (?? :: alpha0))                                                                                                      (size 3) goal: (alpha0 -> a)
(((?? :: (alpha1 -> (alpha0 -> a))) (?? :: alpha1)) (?? :: alpha0))                                                                         (size 3) goal: (alpha0 -> a)
(((?? :: (alpha1 -> (alpha0 -> a))) (?? :: alpha1)) (?? :: alpha0))                                                                         (size 1) goal: (alpha1 -> (alpha0 -> a))
((((?? :: (alpha2 -> (alpha1 -> (alpha0 -> a)))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                            (size 1) goal: (alpha1 -> (alpha0 -> a))
(((?? :: (alpha1 -> (alpha0 -> a))) (?? :: alpha1)) (?? :: alpha0))                                                                         (size 2) goal: (alpha1 -> (alpha0 -> a))
((Data.Maybe.fromMaybe (?? :: alpha1)) (?? :: alpha0))                                                                                      (size 2) goal: a
(Data.Maybe.fromMaybe arg0 (?? :: alpha0))                                                                                                  (size 4) goal: Maybe (a)
(Data.Maybe.fromMaybe arg0 ((?? :: (alpha2 -> Maybe (a))) (?? :: alpha2)))                                                                  (size 4) goal: Maybe (a)
(Data.Maybe.fromMaybe arg0 ((?? :: (alpha2 -> Maybe (a))) (?? :: alpha2)))                                                                  (size 1) goal: (alpha2 -> Maybe (a))
(Data.Maybe.fromMaybe arg0 ((?? :: (alpha2 -> Maybe (a))) (?? :: alpha2)))                                                                  (size 2) goal: (alpha2 -> Maybe (a))
(Data.Maybe.fromMaybe arg0 (((?? :: (alpha3 -> (alpha2 -> Maybe (a)))) (?? :: alpha3)) (?? :: alpha2)))                                     (size 2) goal: (alpha2 -> Maybe (a))
(Data.Maybe.fromMaybe arg0 (((?? :: (alpha3 -> (alpha2 -> Maybe (a)))) (?? :: alpha3)) (?? :: alpha2)))                                     (size 1) goal: (alpha3 -> (alpha2 -> Maybe (a)))
(Data.Maybe.fromMaybe arg0 ((?? :: (alpha2 -> Maybe (a))) (?? :: alpha2)))                                                                  (size 3) goal: (alpha2 -> Maybe (a))
(Data.Maybe.fromMaybe arg0 (Data.Maybe.listToMaybe (?? :: alpha2)))                                                                         (size 3) goal: [a]
(Data.Maybe.fromMaybe arg0 (Data.Maybe.listToMaybe ((?? :: (alpha3 -> [a])) (?? :: alpha3))))                                               (size 3) goal: [a]
(Data.Maybe.fromMaybe arg0 (Data.Maybe.listToMaybe ((?? :: (alpha3 -> [a])) (?? :: alpha3))))                                               (size 1) goal: (alpha3 -> [a])
(Data.Maybe.fromMaybe arg0 (Data.Maybe.listToMaybe ((?? :: (alpha3 -> [a])) (?? :: alpha3))))                                               (size 2) goal: (alpha3 -> [a])
(Data.Maybe.fromMaybe arg0 (((?? :: (alpha3 -> (alpha2 -> Maybe (a)))) (?? :: alpha3)) (?? :: alpha2)))                                     (size 3) goal: (alpha2 -> Maybe (a))
(Data.Maybe.fromMaybe arg0 (((?? :: (alpha3 -> (alpha2 -> Maybe (a)))) (?? :: alpha3)) (?? :: alpha2)))                                     (size 1) goal: (alpha3 -> (alpha2 -> Maybe (a)))
(Data.Maybe.fromMaybe arg0 (((?? :: (alpha3 -> (alpha2 -> Maybe (a)))) (?? :: alpha3)) (?? :: alpha2)))                                     (size 2) goal: (alpha3 -> (alpha2 -> Maybe (a)))
(Data.Maybe.fromMaybe arg0 ((((?? :: (alpha4 -> (alpha3 -> (alpha2 -> Maybe (a))))) (?? :: alpha4)) (?? :: alpha3)) (?? :: alpha2)))        (size 2) goal: (alpha3 -> (alpha2 -> Maybe (a)))
(Data.Maybe.fromMaybe arg0 ((((?? :: (alpha4 -> (alpha3 -> (alpha2 -> Maybe (a))))) (?? :: alpha4)) (?? :: alpha3)) (?? :: alpha2)))        (size 1) goal: (alpha4 -> (alpha3 -> (alpha2 -> Maybe (a))))
((Data.Maybe.fromMaybe ((?? :: (alpha2 -> a)) (?? :: alpha2))) (?? :: alpha0))                                                              (size 2) goal: a
((Data.Maybe.fromMaybe ((?? :: (alpha2 -> a)) (?? :: alpha2))) (?? :: alpha0))                                                              (size 1) goal: (alpha2 -> a)
((GHC.List.foldl1 (?? :: alpha1)) (?? :: alpha0))                                                                                           (size 2) goal: (a -> (a -> a))
((GHC.List.foldl1 (\arg2 -> (?? :: (a -> a)))) (?? :: alpha0))                                                                              (size 1) goal: (a -> a)
((GHC.List.foldl1' (?? :: alpha1)) (?? :: alpha0))                                                                                          (size 2) goal: (a -> (a -> a))
((GHC.List.foldl1' (\arg2 -> (?? :: (a -> a)))) (?? :: alpha0))                                                                             (size 1) goal: (a -> a)
((((?? :: (alpha2 -> (alpha1 -> (alpha0 -> a)))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                            (size 2) goal: (alpha1 -> (alpha0 -> a))
((((?? :: (alpha2 -> (alpha1 -> (alpha0 -> a)))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                            (size 1) goal: (alpha2 -> (alpha1 -> (alpha0 -> a)))
(((((?? :: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))               (size 1) goal: (alpha2 -> (alpha1 -> (alpha0 -> a)))
((?? :: (alpha0 -> a)) (?? :: alpha0))                                                                                                      (size 4) goal: (alpha0 -> a)
(((?? :: (alpha1 -> (alpha0 -> a))) (?? :: alpha1)) (?? :: alpha0))                                                                         (size 4) goal: (alpha0 -> a)
(((?? :: (alpha1 -> (alpha0 -> a))) (?? :: alpha1)) (?? :: alpha0))                                                                         (size 1) goal: (alpha1 -> (alpha0 -> a))
((((?? :: (alpha2 -> (alpha1 -> (alpha0 -> a)))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                            (size 1) goal: (alpha1 -> (alpha0 -> a))
(((?? :: (alpha1 -> (alpha0 -> a))) (?? :: alpha1)) (?? :: alpha0))                                                                         (size 2) goal: (alpha1 -> (alpha0 -> a))
((Data.Maybe.fromMaybe (?? :: alpha1)) (?? :: alpha0))                                                                                      (size 3) goal: a
((Data.Maybe.fromMaybe ((?? :: (alpha2 -> a)) (?? :: alpha2))) (?? :: alpha0))                                                              (size 3) goal: a
((Data.Maybe.fromMaybe ((?? :: (alpha2 -> a)) (?? :: alpha2))) (?? :: alpha0))                                                              (size 1) goal: (alpha2 -> a)
((Data.Maybe.fromMaybe ((?? :: (alpha2 -> a)) (?? :: alpha2))) (?? :: alpha0))                                                              (size 2) goal: (alpha2 -> a)
((Data.Maybe.fromMaybe (((?? :: (alpha3 -> (alpha2 -> a))) (?? :: alpha3)) (?? :: alpha2))) (?? :: alpha0))                                 (size 2) goal: (alpha2 -> a)
((Data.Maybe.fromMaybe (((?? :: (alpha3 -> (alpha2 -> a))) (?? :: alpha3)) (?? :: alpha2))) (?? :: alpha0))                                 (size 1) goal: (alpha3 -> (alpha2 -> a))
((GHC.List.foldl1 (?? :: alpha1)) (?? :: alpha0))                                                                                           (size 3) goal: (a -> (a -> a))
((GHC.List.foldl1 (\arg2 -> (?? :: (a -> a)))) (?? :: alpha0))                                                                              (size 2) goal: (a -> a)
((GHC.List.foldl1 (\arg2 -> (\arg3 -> (?? :: a)))) (?? :: alpha0))                                                                          (size 1) goal: a
((GHC.List.foldl1' (?? :: alpha1)) (?? :: alpha0))                                                                                          (size 3) goal: (a -> (a -> a))
((GHC.List.foldl1' (\arg2 -> (?? :: (a -> a)))) (?? :: alpha0))                                                                             (size 2) goal: (a -> a)
((GHC.List.foldl1' (\arg2 -> (\arg3 -> (?? :: a)))) (?? :: alpha0))                                                                         (size 1) goal: a
((((?? :: (alpha2 -> (alpha1 -> (alpha0 -> a)))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                            (size 2) goal: (alpha1 -> (alpha0 -> a))
((((?? :: (alpha2 -> (alpha1 -> (alpha0 -> a)))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                            (size 1) goal: (alpha2 -> (alpha1 -> (alpha0 -> a)))
(((((?? :: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))               (size 1) goal: (alpha2 -> (alpha1 -> (alpha0 -> a)))
(((?? :: (alpha1 -> (alpha0 -> a))) (?? :: alpha1)) (?? :: alpha0))                                                                         (size 3) goal: (alpha1 -> (alpha0 -> a))
((((?? :: (alpha2 -> (alpha1 -> (alpha0 -> a)))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                            (size 3) goal: (alpha1 -> (alpha0 -> a))
((((?? :: (alpha2 -> (alpha1 -> (alpha0 -> a)))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                            (size 1) goal: (alpha2 -> (alpha1 -> (alpha0 -> a)))
(((((?? :: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))               (size 1) goal: (alpha2 -> (alpha1 -> (alpha0 -> a)))
((((?? :: (alpha2 -> (alpha1 -> (alpha0 -> a)))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                            (size 2) goal: (alpha2 -> (alpha1 -> (alpha0 -> a)))
(((GHC.List.foldl (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                                                           (size 2) goal: (a -> (tauGHC.List.foldl1 -> a))
(((GHC.List.foldl (\arg2 -> (?? :: (tauGHC.List.foldl1 -> a)))) (?? :: alpha1)) (?? :: alpha0))                                             (size 1) goal: (tauGHC.List.foldl1 -> a)
(((GHC.List.foldl' (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                                                          (size 2) goal: (a -> (tauGHC.List.foldl'1 -> a))
(((GHC.List.foldl' (\arg2 -> (?? :: (tauGHC.List.foldl'1 -> a)))) (?? :: alpha1)) (?? :: alpha0))                                           (size 1) goal: (tauGHC.List.foldl'1 -> a)
(((((?? :: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))               (size 2) goal: (alpha2 -> (alpha1 -> (alpha0 -> a)))
(((((?? :: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))               (size 1) goal: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))
((((((?? :: (alpha4 -> (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a)))))) (?? :: alpha4)) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))(size 1) goal: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))
((?? :: (alpha0 -> a)) (?? :: alpha0))                                                                                                      (size 5) goal: (alpha0 -> a)
(((?? :: (alpha1 -> (alpha0 -> a))) (?? :: alpha1)) (?? :: alpha0))                                                                         (size 5) goal: (alpha0 -> a)
(((?? :: (alpha1 -> (alpha0 -> a))) (?? :: alpha1)) (?? :: alpha0))                                                                         (size 1) goal: (alpha1 -> (alpha0 -> a))
((((?? :: (alpha2 -> (alpha1 -> (alpha0 -> a)))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                            (size 1) goal: (alpha1 -> (alpha0 -> a))
(((?? :: (alpha1 -> (alpha0 -> a))) (?? :: alpha1)) (?? :: alpha0))                                                                         (size 2) goal: (alpha1 -> (alpha0 -> a))
((Data.Maybe.fromMaybe (?? :: alpha1)) (?? :: alpha0))                                                                                      (size 4) goal: a
((Data.Maybe.fromMaybe ((?? :: (alpha2 -> a)) (?? :: alpha2))) (?? :: alpha0))                                                              (size 4) goal: a
((Data.Maybe.fromMaybe ((?? :: (alpha2 -> a)) (?? :: alpha2))) (?? :: alpha0))                                                              (size 1) goal: (alpha2 -> a)
((Data.Maybe.fromMaybe ((?? :: (alpha2 -> a)) (?? :: alpha2))) (?? :: alpha0))                                                              (size 2) goal: (alpha2 -> a)
((Data.Maybe.fromMaybe (((?? :: (alpha3 -> (alpha2 -> a))) (?? :: alpha3)) (?? :: alpha2))) (?? :: alpha0))                                 (size 2) goal: (alpha2 -> a)
((Data.Maybe.fromMaybe (((?? :: (alpha3 -> (alpha2 -> a))) (?? :: alpha3)) (?? :: alpha2))) (?? :: alpha0))                                 (size 1) goal: (alpha3 -> (alpha2 -> a))
((Data.Maybe.fromMaybe ((?? :: (alpha2 -> a)) (?? :: alpha2))) (?? :: alpha0))                                                              (size 3) goal: (alpha2 -> a)
((Data.Maybe.fromMaybe (((?? :: (alpha3 -> (alpha2 -> a))) (?? :: alpha3)) (?? :: alpha2))) (?? :: alpha0))                                 (size 3) goal: (alpha2 -> a)
((Data.Maybe.fromMaybe (((?? :: (alpha3 -> (alpha2 -> a))) (?? :: alpha3)) (?? :: alpha2))) (?? :: alpha0))                                 (size 1) goal: (alpha3 -> (alpha2 -> a))
((Data.Maybe.fromMaybe (((?? :: (alpha3 -> (alpha2 -> a))) (?? :: alpha3)) (?? :: alpha2))) (?? :: alpha0))                                 (size 2) goal: (alpha3 -> (alpha2 -> a))
((Data.Maybe.fromMaybe ((((?? :: (alpha4 -> (alpha3 -> (alpha2 -> a)))) (?? :: alpha4)) (?? :: alpha3)) (?? :: alpha2))) (?? :: alpha0))    (size 2) goal: (alpha3 -> (alpha2 -> a))
((Data.Maybe.fromMaybe ((((?? :: (alpha4 -> (alpha3 -> (alpha2 -> a)))) (?? :: alpha4)) (?? :: alpha3)) (?? :: alpha2))) (?? :: alpha0))    (size 1) goal: (alpha4 -> (alpha3 -> (alpha2 -> a)))
((GHC.List.foldl1 (?? :: alpha1)) (?? :: alpha0))                                                                                           (size 4) goal: (a -> (a -> a))
((GHC.List.foldl1 (\arg2 -> (?? :: (a -> a)))) (?? :: alpha0))                                                                              (size 3) goal: (a -> a)
((GHC.List.foldl1 (\arg2 -> (\arg3 -> (?? :: a)))) (?? :: alpha0))                                                                          (size 2) goal: a
(GHC.List.foldl1 (\arg2 -> \arg3 -> arg0) (?? :: alpha0))                                                                                   (size 2) goal: [a]
(GHC.List.foldl1 (\arg2 -> \arg3 -> arg0) ((?? :: (alpha2 -> [a])) (?? :: alpha2)))                                                         (size 2) goal: [a]
(GHC.List.foldl1 (\arg2 -> \arg3 -> arg0) ((?? :: (alpha2 -> [a])) (?? :: alpha2)))                                                         (size 1) goal: (alpha2 -> [a])
(GHC.List.foldl1 (\arg2 -> \arg3 -> arg2) (?? :: alpha0))                                                                                   (size 2) goal: [a]
(GHC.List.foldl1 (\arg2 -> \arg3 -> arg2) ((?? :: (alpha2 -> [a])) (?? :: alpha2)))                                                         (size 2) goal: [a]
(GHC.List.foldl1 (\arg2 -> \arg3 -> arg2) ((?? :: (alpha2 -> [a])) (?? :: alpha2)))                                                         (size 1) goal: (alpha2 -> [a])
(GHC.List.foldl1 (\arg2 -> \arg3 -> arg3) (?? :: alpha0))                                                                                   (size 2) goal: [a]
(GHC.List.foldl1 (\arg2 -> \arg3 -> arg3) ((?? :: (alpha2 -> [a])) (?? :: alpha2)))                                                         (size 2) goal: [a]
(GHC.List.foldl1 (\arg2 -> \arg3 -> arg3) ((?? :: (alpha2 -> [a])) (?? :: alpha2)))                                                         (size 1) goal: (alpha2 -> [a])
((GHC.List.foldl1 (\arg2 -> (\arg3 -> ((?? :: (alpha2 -> a)) (?? :: alpha2))))) (?? :: alpha0))                                             (size 2) goal: a
((GHC.List.foldl1 (\arg2 -> (\arg3 -> ((?? :: (alpha2 -> a)) (?? :: alpha2))))) (?? :: alpha0))                                             (size 1) goal: (alpha2 -> a)
((GHC.List.foldl1' (?? :: alpha1)) (?? :: alpha0))                                                                                          (size 4) goal: (a -> (a -> a))
((GHC.List.foldl1' (\arg2 -> (?? :: (a -> a)))) (?? :: alpha0))                                                                             (size 3) goal: (a -> a)
((GHC.List.foldl1' (\arg2 -> (\arg3 -> (?? :: a)))) (?? :: alpha0))                                                                         (size 2) goal: a
(GHC.List.foldl1' (\arg2 -> \arg3 -> arg0) (?? :: alpha0))                                                                                  (size 2) goal: [a]
(GHC.List.foldl1' (\arg2 -> \arg3 -> arg0) ((?? :: (alpha2 -> [a])) (?? :: alpha2)))                                                        (size 2) goal: [a]
(GHC.List.foldl1' (\arg2 -> \arg3 -> arg0) ((?? :: (alpha2 -> [a])) (?? :: alpha2)))                                                        (size 1) goal: (alpha2 -> [a])
(GHC.List.foldl1' (\arg2 -> \arg3 -> arg2) (?? :: alpha0))                                                                                  (size 2) goal: [a]
(GHC.List.foldl1' (\arg2 -> \arg3 -> arg2) ((?? :: (alpha2 -> [a])) (?? :: alpha2)))                                                        (size 2) goal: [a]
(GHC.List.foldl1' (\arg2 -> \arg3 -> arg2) ((?? :: (alpha2 -> [a])) (?? :: alpha2)))                                                        (size 1) goal: (alpha2 -> [a])
(GHC.List.foldl1' (\arg2 -> \arg3 -> arg3) (?? :: alpha0))                                                                                  (size 2) goal: [a]
(GHC.List.foldl1' (\arg2 -> \arg3 -> arg3) ((?? :: (alpha2 -> [a])) (?? :: alpha2)))                                                        (size 2) goal: [a]
(GHC.List.foldl1' (\arg2 -> \arg3 -> arg3) ((?? :: (alpha2 -> [a])) (?? :: alpha2)))                                                        (size 1) goal: (alpha2 -> [a])
((GHC.List.foldl1' (\arg2 -> (\arg3 -> ((?? :: (alpha2 -> a)) (?? :: alpha2))))) (?? :: alpha0))                                            (size 2) goal: a
((GHC.List.foldl1' (\arg2 -> (\arg3 -> ((?? :: (alpha2 -> a)) (?? :: alpha2))))) (?? :: alpha0))                                            (size 1) goal: (alpha2 -> a)
((((?? :: (alpha2 -> (alpha1 -> (alpha0 -> a)))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                            (size 2) goal: (alpha1 -> (alpha0 -> a))
((((?? :: (alpha2 -> (alpha1 -> (alpha0 -> a)))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                            (size 1) goal: (alpha2 -> (alpha1 -> (alpha0 -> a)))
(((((?? :: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))               (size 1) goal: (alpha2 -> (alpha1 -> (alpha0 -> a)))
(((?? :: (alpha1 -> (alpha0 -> a))) (?? :: alpha1)) (?? :: alpha0))                                                                         (size 3) goal: (alpha1 -> (alpha0 -> a))
((((?? :: (alpha2 -> (alpha1 -> (alpha0 -> a)))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                            (size 3) goal: (alpha1 -> (alpha0 -> a))
((((?? :: (alpha2 -> (alpha1 -> (alpha0 -> a)))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                            (size 1) goal: (alpha2 -> (alpha1 -> (alpha0 -> a)))
(((((?? :: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))               (size 1) goal: (alpha2 -> (alpha1 -> (alpha0 -> a)))
((((?? :: (alpha2 -> (alpha1 -> (alpha0 -> a)))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                            (size 2) goal: (alpha2 -> (alpha1 -> (alpha0 -> a)))
(((GHC.List.foldl (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                                                           (size 2) goal: (a -> (tauGHC.List.foldl1 -> a))
(((GHC.List.foldl (\arg2 -> (?? :: (tauGHC.List.foldl1 -> a)))) (?? :: alpha1)) (?? :: alpha0))                                             (size 1) goal: (tauGHC.List.foldl1 -> a)
(((GHC.List.foldl' (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                                                          (size 2) goal: (a -> (tauGHC.List.foldl'1 -> a))
(((GHC.List.foldl' (\arg2 -> (?? :: (tauGHC.List.foldl'1 -> a)))) (?? :: alpha1)) (?? :: alpha0))                                           (size 1) goal: (tauGHC.List.foldl'1 -> a)
(((((?? :: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))               (size 2) goal: (alpha2 -> (alpha1 -> (alpha0 -> a)))
(((((?? :: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))               (size 1) goal: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))
((((((?? :: (alpha4 -> (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a)))))) (?? :: alpha4)) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))(size 1) goal: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))
(((?? :: (alpha1 -> (alpha0 -> a))) (?? :: alpha1)) (?? :: alpha0))                                                                         (size 4) goal: (alpha1 -> (alpha0 -> a))
((((?? :: (alpha2 -> (alpha1 -> (alpha0 -> a)))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                            (size 4) goal: (alpha1 -> (alpha0 -> a))
((((?? :: (alpha2 -> (alpha1 -> (alpha0 -> a)))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                            (size 1) goal: (alpha2 -> (alpha1 -> (alpha0 -> a)))
(((((?? :: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))               (size 1) goal: (alpha2 -> (alpha1 -> (alpha0 -> a)))
((((?? :: (alpha2 -> (alpha1 -> (alpha0 -> a)))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                            (size 2) goal: (alpha2 -> (alpha1 -> (alpha0 -> a)))
(((GHC.List.foldl (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                                                           (size 3) goal: (a -> (tauGHC.List.foldl1 -> a))
(((GHC.List.foldl (\arg2 -> (?? :: (tauGHC.List.foldl1 -> a)))) (?? :: alpha1)) (?? :: alpha0))                                             (size 2) goal: (tauGHC.List.foldl1 -> a)
(((GHC.List.foldl (\arg2 -> (\arg3 -> (?? :: a)))) (?? :: alpha1)) (?? :: alpha0))                                                          (size 1) goal: a
(((GHC.List.foldl' (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                                                          (size 3) goal: (a -> (tauGHC.List.foldl'1 -> a))
(((GHC.List.foldl' (\arg2 -> (?? :: (tauGHC.List.foldl'1 -> a)))) (?? :: alpha1)) (?? :: alpha0))                                           (size 2) goal: (tauGHC.List.foldl'1 -> a)
(((GHC.List.foldl' (\arg2 -> (\arg3 -> (?? :: a)))) (?? :: alpha1)) (?? :: alpha0))                                                         (size 1) goal: a
(((((?? :: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))               (size 2) goal: (alpha2 -> (alpha1 -> (alpha0 -> a)))
(((((?? :: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))               (size 1) goal: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))
((((((?? :: (alpha4 -> (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a)))))) (?? :: alpha4)) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))(size 1) goal: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))
((((?? :: (alpha2 -> (alpha1 -> (alpha0 -> a)))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                            (size 3) goal: (alpha2 -> (alpha1 -> (alpha0 -> a)))
(((Data.Maybe.fromMaybe (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                                                     (size 3) goal: (alpha0 -> a)
(((Data.Maybe.fromMaybe (\arg2 -> (?? :: a))) (?? :: alpha1)) (?? :: alpha0))                                                               (size 2) goal: a
(((GHC.List.foldl1 (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                                                          (size 3) goal: (((alpha0 -> a)) -> (((alpha0 -> a)) -> (alpha0 -> a)))
(((GHC.List.foldl1 (\arg2 -> (?? :: (((alpha0 -> a)) -> (alpha0 -> a))))) (?? :: alpha1)) (?? :: alpha0))                                   (size 2) goal: (((alpha0 -> a)) -> (alpha0 -> a))
(((GHC.List.foldl1' (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                                                         (size 3) goal: (((alpha0 -> a)) -> (((alpha0 -> a)) -> (alpha0 -> a)))
(((GHC.List.foldl1' (\arg2 -> (?? :: (((alpha0 -> a)) -> (alpha0 -> a))))) (?? :: alpha1)) (?? :: alpha0))                                  (size 2) goal: (((alpha0 -> a)) -> (alpha0 -> a))
(((((?? :: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))               (size 3) goal: (alpha2 -> (alpha1 -> (alpha0 -> a)))
(((((?? :: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))               (size 1) goal: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))
((((((?? :: (alpha4 -> (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a)))))) (?? :: alpha4)) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))(size 1) goal: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))
(((((?? :: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))               (size 2) goal: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))
((((((?? :: (alpha4 -> (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a)))))) (?? :: alpha4)) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))(size 2) goal: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))
((((((?? :: (alpha4 -> (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a)))))) (?? :: alpha4)) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))(size 1) goal: (alpha4 -> (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a)))))
(((((((?? :: (alpha5 -> (alpha4 -> (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))))) (?? :: alpha5)) (?? :: alpha4)) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))(size 1) goal: (alpha4 -> (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a)))))

running dfsExactly on <a> . (a -> ([Maybe (a)] -> a)) at size 7
(?? :: a)                                                                                                                                   (size 7) goal: a
((?? :: (alpha0 -> a)) (?? :: alpha0))                                                                                                      (size 7) goal: a
((?? :: (alpha0 -> a)) (?? :: alpha0))                                                                                                      (size 1) goal: (alpha0 -> a)
(((?? :: (alpha1 -> (alpha0 -> a))) (?? :: alpha1)) (?? :: alpha0))                                                                         (size 1) goal: (alpha0 -> a)
((?? :: (alpha0 -> a)) (?? :: alpha0))                                                                                                      (size 2) goal: (alpha0 -> a)
(((?? :: (alpha1 -> (alpha0 -> a))) (?? :: alpha1)) (?? :: alpha0))                                                                         (size 2) goal: (alpha0 -> a)
(((?? :: (alpha1 -> (alpha0 -> a))) (?? :: alpha1)) (?? :: alpha0))                                                                         (size 1) goal: (alpha1 -> (alpha0 -> a))
((((?? :: (alpha2 -> (alpha1 -> (alpha0 -> a)))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                            (size 1) goal: (alpha1 -> (alpha0 -> a))
((?? :: (alpha0 -> a)) (?? :: alpha0))                                                                                                      (size 3) goal: (alpha0 -> a)
(((?? :: (alpha1 -> (alpha0 -> a))) (?? :: alpha1)) (?? :: alpha0))                                                                         (size 3) goal: (alpha0 -> a)
(((?? :: (alpha1 -> (alpha0 -> a))) (?? :: alpha1)) (?? :: alpha0))                                                                         (size 1) goal: (alpha1 -> (alpha0 -> a))
((((?? :: (alpha2 -> (alpha1 -> (alpha0 -> a)))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                            (size 1) goal: (alpha1 -> (alpha0 -> a))
(((?? :: (alpha1 -> (alpha0 -> a))) (?? :: alpha1)) (?? :: alpha0))                                                                         (size 2) goal: (alpha1 -> (alpha0 -> a))
((Data.Maybe.fromMaybe (?? :: alpha1)) (?? :: alpha0))                                                                                      (size 2) goal: a
(Data.Maybe.fromMaybe arg0 (?? :: alpha0))                                                                                                  (size 5) goal: Maybe (a)
(Data.Maybe.fromMaybe arg0 ((?? :: (alpha2 -> Maybe (a))) (?? :: alpha2)))                                                                  (size 5) goal: Maybe (a)
(Data.Maybe.fromMaybe arg0 ((?? :: (alpha2 -> Maybe (a))) (?? :: alpha2)))                                                                  (size 1) goal: (alpha2 -> Maybe (a))
(Data.Maybe.fromMaybe arg0 ((?? :: (alpha2 -> Maybe (a))) (?? :: alpha2)))                                                                  (size 2) goal: (alpha2 -> Maybe (a))
(Data.Maybe.fromMaybe arg0 (((?? :: (alpha3 -> (alpha2 -> Maybe (a)))) (?? :: alpha3)) (?? :: alpha2)))                                     (size 2) goal: (alpha2 -> Maybe (a))
(Data.Maybe.fromMaybe arg0 (((?? :: (alpha3 -> (alpha2 -> Maybe (a)))) (?? :: alpha3)) (?? :: alpha2)))                                     (size 1) goal: (alpha3 -> (alpha2 -> Maybe (a)))
(Data.Maybe.fromMaybe arg0 ((?? :: (alpha2 -> Maybe (a))) (?? :: alpha2)))                                                                  (size 3) goal: (alpha2 -> Maybe (a))
(Data.Maybe.fromMaybe arg0 (Data.Maybe.listToMaybe (?? :: alpha2)))                                                                         (size 4) goal: [a]
(Data.Maybe.fromMaybe arg0 (Data.Maybe.listToMaybe ((?? :: (alpha3 -> [a])) (?? :: alpha3))))                                               (size 4) goal: [a]
(Data.Maybe.fromMaybe arg0 (Data.Maybe.listToMaybe ((?? :: (alpha3 -> [a])) (?? :: alpha3))))                                               (size 1) goal: (alpha3 -> [a])
(Data.Maybe.fromMaybe arg0 (Data.Maybe.listToMaybe ((?? :: (alpha3 -> [a])) (?? :: alpha3))))                                               (size 2) goal: (alpha3 -> [a])
(Data.Maybe.fromMaybe arg0 (Data.Maybe.listToMaybe ((?? :: (alpha3 -> [a])) (?? :: alpha3))))                                               (size 3) goal: (alpha3 -> [a])
(Data.Maybe.fromMaybe arg0 (Data.Maybe.listToMaybe (((?? :: (alpha4 -> (alpha3 -> [a]))) (?? :: alpha4)) (?? :: alpha3))))                  (size 3) goal: (alpha3 -> [a])
(Data.Maybe.fromMaybe arg0 (Data.Maybe.listToMaybe (((?? :: (alpha4 -> (alpha3 -> [a]))) (?? :: alpha4)) (?? :: alpha3))))                  (size 1) goal: (alpha4 -> (alpha3 -> [a]))
(Data.Maybe.fromMaybe arg0 (Data.Maybe.listToMaybe (((?? :: (alpha4 -> (alpha3 -> [a]))) (?? :: alpha4)) (?? :: alpha3))))                  (size 2) goal: (alpha4 -> (alpha3 -> [a]))
(Data.Maybe.fromMaybe arg0 (((?? :: (alpha3 -> (alpha2 -> Maybe (a)))) (?? :: alpha3)) (?? :: alpha2)))                                     (size 3) goal: (alpha2 -> Maybe (a))
(Data.Maybe.fromMaybe arg0 (((?? :: (alpha3 -> (alpha2 -> Maybe (a)))) (?? :: alpha3)) (?? :: alpha2)))                                     (size 1) goal: (alpha3 -> (alpha2 -> Maybe (a)))
(Data.Maybe.fromMaybe arg0 (((?? :: (alpha3 -> (alpha2 -> Maybe (a)))) (?? :: alpha3)) (?? :: alpha2)))                                     (size 2) goal: (alpha3 -> (alpha2 -> Maybe (a)))
(Data.Maybe.fromMaybe arg0 ((((?? :: (alpha4 -> (alpha3 -> (alpha2 -> Maybe (a))))) (?? :: alpha4)) (?? :: alpha3)) (?? :: alpha2)))        (size 2) goal: (alpha3 -> (alpha2 -> Maybe (a)))
(Data.Maybe.fromMaybe arg0 ((((?? :: (alpha4 -> (alpha3 -> (alpha2 -> Maybe (a))))) (?? :: alpha4)) (?? :: alpha3)) (?? :: alpha2)))        (size 1) goal: (alpha4 -> (alpha3 -> (alpha2 -> Maybe (a))))
(Data.Maybe.fromMaybe arg0 ((?? :: (alpha2 -> Maybe (a))) (?? :: alpha2)))                                                                  (size 4) goal: (alpha2 -> Maybe (a))
(Data.Maybe.fromMaybe arg0 (((?? :: (alpha3 -> (alpha2 -> Maybe (a)))) (?? :: alpha3)) (?? :: alpha2)))                                     (size 4) goal: (alpha2 -> Maybe (a))
(Data.Maybe.fromMaybe arg0 (((?? :: (alpha3 -> (alpha2 -> Maybe (a)))) (?? :: alpha3)) (?? :: alpha2)))                                     (size 1) goal: (alpha3 -> (alpha2 -> Maybe (a)))
(Data.Maybe.fromMaybe arg0 (((?? :: (alpha3 -> (alpha2 -> Maybe (a)))) (?? :: alpha3)) (?? :: alpha2)))                                     (size 2) goal: (alpha3 -> (alpha2 -> Maybe (a)))
(Data.Maybe.fromMaybe arg0 ((((?? :: (alpha4 -> (alpha3 -> (alpha2 -> Maybe (a))))) (?? :: alpha4)) (?? :: alpha3)) (?? :: alpha2)))        (size 2) goal: (alpha3 -> (alpha2 -> Maybe (a)))
(Data.Maybe.fromMaybe arg0 ((((?? :: (alpha4 -> (alpha3 -> (alpha2 -> Maybe (a))))) (?? :: alpha4)) (?? :: alpha3)) (?? :: alpha2)))        (size 1) goal: (alpha4 -> (alpha3 -> (alpha2 -> Maybe (a))))
(Data.Maybe.fromMaybe arg0 (((?? :: (alpha3 -> (alpha2 -> Maybe (a)))) (?? :: alpha3)) (?? :: alpha2)))                                     (size 3) goal: (alpha3 -> (alpha2 -> Maybe (a)))
(Data.Maybe.fromMaybe arg0 ((((?? :: (alpha4 -> (alpha3 -> (alpha2 -> Maybe (a))))) (?? :: alpha4)) (?? :: alpha3)) (?? :: alpha2)))        (size 3) goal: (alpha3 -> (alpha2 -> Maybe (a)))
(Data.Maybe.fromMaybe arg0 ((((?? :: (alpha4 -> (alpha3 -> (alpha2 -> Maybe (a))))) (?? :: alpha4)) (?? :: alpha3)) (?? :: alpha2)))        (size 1) goal: (alpha4 -> (alpha3 -> (alpha2 -> Maybe (a))))
(Data.Maybe.fromMaybe arg0 ((((?? :: (alpha4 -> (alpha3 -> (alpha2 -> Maybe (a))))) (?? :: alpha4)) (?? :: alpha3)) (?? :: alpha2)))        (size 2) goal: (alpha4 -> (alpha3 -> (alpha2 -> Maybe (a))))
(Data.Maybe.fromMaybe arg0 (((((?? :: (alpha5 -> (alpha4 -> (alpha3 -> (alpha2 -> Maybe (a)))))) (?? :: alpha5)) (?? :: alpha4)) (?? :: alpha3)) (?? :: alpha2)))(size 2) goal: (alpha4 -> (alpha3 -> (alpha2 -> Maybe (a))))
(Data.Maybe.fromMaybe arg0 (((((?? :: (alpha5 -> (alpha4 -> (alpha3 -> (alpha2 -> Maybe (a)))))) (?? :: alpha5)) (?? :: alpha4)) (?? :: alpha3)) (?? :: alpha2)))(size 1) goal: (alpha5 -> (alpha4 -> (alpha3 -> (alpha2 -> Maybe (a)))))
((Data.Maybe.fromMaybe ((?? :: (alpha2 -> a)) (?? :: alpha2))) (?? :: alpha0))                                                              (size 2) goal: a
((Data.Maybe.fromMaybe ((?? :: (alpha2 -> a)) (?? :: alpha2))) (?? :: alpha0))                                                              (size 1) goal: (alpha2 -> a)
((GHC.List.foldl1 (?? :: alpha1)) (?? :: alpha0))                                                                                           (size 2) goal: (a -> (a -> a))
((GHC.List.foldl1 (\arg2 -> (?? :: (a -> a)))) (?? :: alpha0))                                                                              (size 1) goal: (a -> a)
((GHC.List.foldl1' (?? :: alpha1)) (?? :: alpha0))                                                                                          (size 2) goal: (a -> (a -> a))
((GHC.List.foldl1' (\arg2 -> (?? :: (a -> a)))) (?? :: alpha0))                                                                             (size 1) goal: (a -> a)
((((?? :: (alpha2 -> (alpha1 -> (alpha0 -> a)))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                            (size 2) goal: (alpha1 -> (alpha0 -> a))
((((?? :: (alpha2 -> (alpha1 -> (alpha0 -> a)))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                            (size 1) goal: (alpha2 -> (alpha1 -> (alpha0 -> a)))
(((((?? :: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))               (size 1) goal: (alpha2 -> (alpha1 -> (alpha0 -> a)))
((?? :: (alpha0 -> a)) (?? :: alpha0))                                                                                                      (size 4) goal: (alpha0 -> a)
(((?? :: (alpha1 -> (alpha0 -> a))) (?? :: alpha1)) (?? :: alpha0))                                                                         (size 4) goal: (alpha0 -> a)
(((?? :: (alpha1 -> (alpha0 -> a))) (?? :: alpha1)) (?? :: alpha0))                                                                         (size 1) goal: (alpha1 -> (alpha0 -> a))
((((?? :: (alpha2 -> (alpha1 -> (alpha0 -> a)))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                            (size 1) goal: (alpha1 -> (alpha0 -> a))
(((?? :: (alpha1 -> (alpha0 -> a))) (?? :: alpha1)) (?? :: alpha0))                                                                         (size 2) goal: (alpha1 -> (alpha0 -> a))
((Data.Maybe.fromMaybe (?? :: alpha1)) (?? :: alpha0))                                                                                      (size 3) goal: a
((Data.Maybe.fromMaybe ((?? :: (alpha2 -> a)) (?? :: alpha2))) (?? :: alpha0))                                                              (size 3) goal: a
((Data.Maybe.fromMaybe ((?? :: (alpha2 -> a)) (?? :: alpha2))) (?? :: alpha0))                                                              (size 1) goal: (alpha2 -> a)
((Data.Maybe.fromMaybe ((?? :: (alpha2 -> a)) (?? :: alpha2))) (?? :: alpha0))                                                              (size 2) goal: (alpha2 -> a)
((Data.Maybe.fromMaybe (((?? :: (alpha3 -> (alpha2 -> a))) (?? :: alpha3)) (?? :: alpha2))) (?? :: alpha0))                                 (size 2) goal: (alpha2 -> a)
((Data.Maybe.fromMaybe (((?? :: (alpha3 -> (alpha2 -> a))) (?? :: alpha3)) (?? :: alpha2))) (?? :: alpha0))                                 (size 1) goal: (alpha3 -> (alpha2 -> a))
((GHC.List.foldl1 (?? :: alpha1)) (?? :: alpha0))                                                                                           (size 3) goal: (a -> (a -> a))
((GHC.List.foldl1 (\arg2 -> (?? :: (a -> a)))) (?? :: alpha0))                                                                              (size 2) goal: (a -> a)
((GHC.List.foldl1 (\arg2 -> (\arg3 -> (?? :: a)))) (?? :: alpha0))                                                                          (size 1) goal: a
((GHC.List.foldl1' (?? :: alpha1)) (?? :: alpha0))                                                                                          (size 3) goal: (a -> (a -> a))
((GHC.List.foldl1' (\arg2 -> (?? :: (a -> a)))) (?? :: alpha0))                                                                             (size 2) goal: (a -> a)
((GHC.List.foldl1' (\arg2 -> (\arg3 -> (?? :: a)))) (?? :: alpha0))                                                                         (size 1) goal: a
((((?? :: (alpha2 -> (alpha1 -> (alpha0 -> a)))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                            (size 2) goal: (alpha1 -> (alpha0 -> a))
((((?? :: (alpha2 -> (alpha1 -> (alpha0 -> a)))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                            (size 1) goal: (alpha2 -> (alpha1 -> (alpha0 -> a)))
(((((?? :: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))               (size 1) goal: (alpha2 -> (alpha1 -> (alpha0 -> a)))
(((?? :: (alpha1 -> (alpha0 -> a))) (?? :: alpha1)) (?? :: alpha0))                                                                         (size 3) goal: (alpha1 -> (alpha0 -> a))
((((?? :: (alpha2 -> (alpha1 -> (alpha0 -> a)))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                            (size 3) goal: (alpha1 -> (alpha0 -> a))
((((?? :: (alpha2 -> (alpha1 -> (alpha0 -> a)))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                            (size 1) goal: (alpha2 -> (alpha1 -> (alpha0 -> a)))
(((((?? :: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))               (size 1) goal: (alpha2 -> (alpha1 -> (alpha0 -> a)))
((((?? :: (alpha2 -> (alpha1 -> (alpha0 -> a)))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                            (size 2) goal: (alpha2 -> (alpha1 -> (alpha0 -> a)))
(((GHC.List.foldl (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                                                           (size 2) goal: (a -> (tauGHC.List.foldl1 -> a))
(((GHC.List.foldl (\arg2 -> (?? :: (tauGHC.List.foldl1 -> a)))) (?? :: alpha1)) (?? :: alpha0))                                             (size 1) goal: (tauGHC.List.foldl1 -> a)
(((GHC.List.foldl' (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                                                          (size 2) goal: (a -> (tauGHC.List.foldl'1 -> a))
(((GHC.List.foldl' (\arg2 -> (?? :: (tauGHC.List.foldl'1 -> a)))) (?? :: alpha1)) (?? :: alpha0))                                           (size 1) goal: (tauGHC.List.foldl'1 -> a)
(((((?? :: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))               (size 2) goal: (alpha2 -> (alpha1 -> (alpha0 -> a)))
(((((?? :: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))               (size 1) goal: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))
((((((?? :: (alpha4 -> (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a)))))) (?? :: alpha4)) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))(size 1) goal: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))
((?? :: (alpha0 -> a)) (?? :: alpha0))                                                                                                      (size 5) goal: (alpha0 -> a)
(((?? :: (alpha1 -> (alpha0 -> a))) (?? :: alpha1)) (?? :: alpha0))                                                                         (size 5) goal: (alpha0 -> a)
(((?? :: (alpha1 -> (alpha0 -> a))) (?? :: alpha1)) (?? :: alpha0))                                                                         (size 1) goal: (alpha1 -> (alpha0 -> a))
((((?? :: (alpha2 -> (alpha1 -> (alpha0 -> a)))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                            (size 1) goal: (alpha1 -> (alpha0 -> a))
(((?? :: (alpha1 -> (alpha0 -> a))) (?? :: alpha1)) (?? :: alpha0))                                                                         (size 2) goal: (alpha1 -> (alpha0 -> a))
((Data.Maybe.fromMaybe (?? :: alpha1)) (?? :: alpha0))                                                                                      (size 4) goal: a
((Data.Maybe.fromMaybe ((?? :: (alpha2 -> a)) (?? :: alpha2))) (?? :: alpha0))                                                              (size 4) goal: a
((Data.Maybe.fromMaybe ((?? :: (alpha2 -> a)) (?? :: alpha2))) (?? :: alpha0))                                                              (size 1) goal: (alpha2 -> a)
((Data.Maybe.fromMaybe ((?? :: (alpha2 -> a)) (?? :: alpha2))) (?? :: alpha0))                                                              (size 2) goal: (alpha2 -> a)
((Data.Maybe.fromMaybe (((?? :: (alpha3 -> (alpha2 -> a))) (?? :: alpha3)) (?? :: alpha2))) (?? :: alpha0))                                 (size 2) goal: (alpha2 -> a)
((Data.Maybe.fromMaybe (((?? :: (alpha3 -> (alpha2 -> a))) (?? :: alpha3)) (?? :: alpha2))) (?? :: alpha0))                                 (size 1) goal: (alpha3 -> (alpha2 -> a))
((Data.Maybe.fromMaybe ((?? :: (alpha2 -> a)) (?? :: alpha2))) (?? :: alpha0))                                                              (size 3) goal: (alpha2 -> a)
((Data.Maybe.fromMaybe (((?? :: (alpha3 -> (alpha2 -> a))) (?? :: alpha3)) (?? :: alpha2))) (?? :: alpha0))                                 (size 3) goal: (alpha2 -> a)
((Data.Maybe.fromMaybe (((?? :: (alpha3 -> (alpha2 -> a))) (?? :: alpha3)) (?? :: alpha2))) (?? :: alpha0))                                 (size 1) goal: (alpha3 -> (alpha2 -> a))
((Data.Maybe.fromMaybe (((?? :: (alpha3 -> (alpha2 -> a))) (?? :: alpha3)) (?? :: alpha2))) (?? :: alpha0))                                 (size 2) goal: (alpha3 -> (alpha2 -> a))
((Data.Maybe.fromMaybe ((((?? :: (alpha4 -> (alpha3 -> (alpha2 -> a)))) (?? :: alpha4)) (?? :: alpha3)) (?? :: alpha2))) (?? :: alpha0))    (size 2) goal: (alpha3 -> (alpha2 -> a))
((Data.Maybe.fromMaybe ((((?? :: (alpha4 -> (alpha3 -> (alpha2 -> a)))) (?? :: alpha4)) (?? :: alpha3)) (?? :: alpha2))) (?? :: alpha0))    (size 1) goal: (alpha4 -> (alpha3 -> (alpha2 -> a)))
((GHC.List.foldl1 (?? :: alpha1)) (?? :: alpha0))                                                                                           (size 4) goal: (a -> (a -> a))
((GHC.List.foldl1 (\arg2 -> (?? :: (a -> a)))) (?? :: alpha0))                                                                              (size 3) goal: (a -> a)
((GHC.List.foldl1 (\arg2 -> (\arg3 -> (?? :: a)))) (?? :: alpha0))                                                                          (size 2) goal: a
(GHC.List.foldl1 (\arg2 -> \arg3 -> arg0) (?? :: alpha0))                                                                                   (size 3) goal: [a]
(GHC.List.foldl1 (\arg2 -> \arg3 -> arg0) ((?? :: (alpha2 -> [a])) (?? :: alpha2)))                                                         (size 3) goal: [a]
(GHC.List.foldl1 (\arg2 -> \arg3 -> arg0) ((?? :: (alpha2 -> [a])) (?? :: alpha2)))                                                         (size 1) goal: (alpha2 -> [a])
(GHC.List.foldl1 (\arg2 -> \arg3 -> arg0) ((?? :: (alpha2 -> [a])) (?? :: alpha2)))                                                         (size 2) goal: (alpha2 -> [a])
(GHC.List.foldl1 (\arg2 -> \arg3 -> arg0) (((?? :: (alpha3 -> (alpha2 -> [a]))) (?? :: alpha3)) (?? :: alpha2)))                            (size 2) goal: (alpha2 -> [a])
(GHC.List.foldl1 (\arg2 -> \arg3 -> arg0) (((?? :: (alpha3 -> (alpha2 -> [a]))) (?? :: alpha3)) (?? :: alpha2)))                            (size 1) goal: (alpha3 -> (alpha2 -> [a]))
(GHC.List.foldl1 (\arg2 -> \arg3 -> arg2) (?? :: alpha0))                                                                                   (size 3) goal: [a]
(GHC.List.foldl1 (\arg2 -> \arg3 -> arg2) ((?? :: (alpha2 -> [a])) (?? :: alpha2)))                                                         (size 3) goal: [a]
(GHC.List.foldl1 (\arg2 -> \arg3 -> arg2) ((?? :: (alpha2 -> [a])) (?? :: alpha2)))                                                         (size 1) goal: (alpha2 -> [a])
(GHC.List.foldl1 (\arg2 -> \arg3 -> arg2) ((?? :: (alpha2 -> [a])) (?? :: alpha2)))                                                         (size 2) goal: (alpha2 -> [a])
(GHC.List.foldl1 (\arg2 -> \arg3 -> arg2) (((?? :: (alpha3 -> (alpha2 -> [a]))) (?? :: alpha3)) (?? :: alpha2)))                            (size 2) goal: (alpha2 -> [a])
(GHC.List.foldl1 (\arg2 -> \arg3 -> arg2) (((?? :: (alpha3 -> (alpha2 -> [a]))) (?? :: alpha3)) (?? :: alpha2)))                            (size 1) goal: (alpha3 -> (alpha2 -> [a]))
(GHC.List.foldl1 (\arg2 -> \arg3 -> arg3) (?? :: alpha0))                                                                                   (size 3) goal: [a]
(GHC.List.foldl1 (\arg2 -> \arg3 -> arg3) ((?? :: (alpha2 -> [a])) (?? :: alpha2)))                                                         (size 3) goal: [a]
(GHC.List.foldl1 (\arg2 -> \arg3 -> arg3) ((?? :: (alpha2 -> [a])) (?? :: alpha2)))                                                         (size 1) goal: (alpha2 -> [a])
(GHC.List.foldl1 (\arg2 -> \arg3 -> arg3) ((?? :: (alpha2 -> [a])) (?? :: alpha2)))                                                         (size 2) goal: (alpha2 -> [a])
(GHC.List.foldl1 (\arg2 -> \arg3 -> arg3) (((?? :: (alpha3 -> (alpha2 -> [a]))) (?? :: alpha3)) (?? :: alpha2)))                            (size 2) goal: (alpha2 -> [a])
(GHC.List.foldl1 (\arg2 -> \arg3 -> arg3) (((?? :: (alpha3 -> (alpha2 -> [a]))) (?? :: alpha3)) (?? :: alpha2)))                            (size 1) goal: (alpha3 -> (alpha2 -> [a]))
((GHC.List.foldl1 (\arg2 -> (\arg3 -> ((?? :: (alpha2 -> a)) (?? :: alpha2))))) (?? :: alpha0))                                             (size 2) goal: a
((GHC.List.foldl1 (\arg2 -> (\arg3 -> ((?? :: (alpha2 -> a)) (?? :: alpha2))))) (?? :: alpha0))                                             (size 1) goal: (alpha2 -> a)
((GHC.List.foldl1' (?? :: alpha1)) (?? :: alpha0))                                                                                          (size 4) goal: (a -> (a -> a))
((GHC.List.foldl1' (\arg2 -> (?? :: (a -> a)))) (?? :: alpha0))                                                                             (size 3) goal: (a -> a)
((GHC.List.foldl1' (\arg2 -> (\arg3 -> (?? :: a)))) (?? :: alpha0))                                                                         (size 2) goal: a
(GHC.List.foldl1' (\arg2 -> \arg3 -> arg0) (?? :: alpha0))                                                                                  (size 3) goal: [a]
(GHC.List.foldl1' (\arg2 -> \arg3 -> arg0) ((?? :: (alpha2 -> [a])) (?? :: alpha2)))                                                        (size 3) goal: [a]
(GHC.List.foldl1' (\arg2 -> \arg3 -> arg0) ((?? :: (alpha2 -> [a])) (?? :: alpha2)))                                                        (size 1) goal: (alpha2 -> [a])
(GHC.List.foldl1' (\arg2 -> \arg3 -> arg0) ((?? :: (alpha2 -> [a])) (?? :: alpha2)))                                                        (size 2) goal: (alpha2 -> [a])
(GHC.List.foldl1' (\arg2 -> \arg3 -> arg0) (((?? :: (alpha3 -> (alpha2 -> [a]))) (?? :: alpha3)) (?? :: alpha2)))                           (size 2) goal: (alpha2 -> [a])
(GHC.List.foldl1' (\arg2 -> \arg3 -> arg0) (((?? :: (alpha3 -> (alpha2 -> [a]))) (?? :: alpha3)) (?? :: alpha2)))                           (size 1) goal: (alpha3 -> (alpha2 -> [a]))
(GHC.List.foldl1' (\arg2 -> \arg3 -> arg2) (?? :: alpha0))                                                                                  (size 3) goal: [a]
(GHC.List.foldl1' (\arg2 -> \arg3 -> arg2) ((?? :: (alpha2 -> [a])) (?? :: alpha2)))                                                        (size 3) goal: [a]
(GHC.List.foldl1' (\arg2 -> \arg3 -> arg2) ((?? :: (alpha2 -> [a])) (?? :: alpha2)))                                                        (size 1) goal: (alpha2 -> [a])
(GHC.List.foldl1' (\arg2 -> \arg3 -> arg2) ((?? :: (alpha2 -> [a])) (?? :: alpha2)))                                                        (size 2) goal: (alpha2 -> [a])
(GHC.List.foldl1' (\arg2 -> \arg3 -> arg2) (((?? :: (alpha3 -> (alpha2 -> [a]))) (?? :: alpha3)) (?? :: alpha2)))                           (size 2) goal: (alpha2 -> [a])
(GHC.List.foldl1' (\arg2 -> \arg3 -> arg2) (((?? :: (alpha3 -> (alpha2 -> [a]))) (?? :: alpha3)) (?? :: alpha2)))                           (size 1) goal: (alpha3 -> (alpha2 -> [a]))
(GHC.List.foldl1' (\arg2 -> \arg3 -> arg3) (?? :: alpha0))                                                                                  (size 3) goal: [a]
(GHC.List.foldl1' (\arg2 -> \arg3 -> arg3) ((?? :: (alpha2 -> [a])) (?? :: alpha2)))                                                        (size 3) goal: [a]
(GHC.List.foldl1' (\arg2 -> \arg3 -> arg3) ((?? :: (alpha2 -> [a])) (?? :: alpha2)))                                                        (size 1) goal: (alpha2 -> [a])
(GHC.List.foldl1' (\arg2 -> \arg3 -> arg3) ((?? :: (alpha2 -> [a])) (?? :: alpha2)))                                                        (size 2) goal: (alpha2 -> [a])
(GHC.List.foldl1' (\arg2 -> \arg3 -> arg3) (((?? :: (alpha3 -> (alpha2 -> [a]))) (?? :: alpha3)) (?? :: alpha2)))                           (size 2) goal: (alpha2 -> [a])
(GHC.List.foldl1' (\arg2 -> \arg3 -> arg3) (((?? :: (alpha3 -> (alpha2 -> [a]))) (?? :: alpha3)) (?? :: alpha2)))                           (size 1) goal: (alpha3 -> (alpha2 -> [a]))
((GHC.List.foldl1' (\arg2 -> (\arg3 -> ((?? :: (alpha2 -> a)) (?? :: alpha2))))) (?? :: alpha0))                                            (size 2) goal: a
((GHC.List.foldl1' (\arg2 -> (\arg3 -> ((?? :: (alpha2 -> a)) (?? :: alpha2))))) (?? :: alpha0))                                            (size 1) goal: (alpha2 -> a)
((((?? :: (alpha2 -> (alpha1 -> (alpha0 -> a)))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                            (size 2) goal: (alpha1 -> (alpha0 -> a))
((((?? :: (alpha2 -> (alpha1 -> (alpha0 -> a)))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                            (size 1) goal: (alpha2 -> (alpha1 -> (alpha0 -> a)))
(((((?? :: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))               (size 1) goal: (alpha2 -> (alpha1 -> (alpha0 -> a)))
(((?? :: (alpha1 -> (alpha0 -> a))) (?? :: alpha1)) (?? :: alpha0))                                                                         (size 3) goal: (alpha1 -> (alpha0 -> a))
((((?? :: (alpha2 -> (alpha1 -> (alpha0 -> a)))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                            (size 3) goal: (alpha1 -> (alpha0 -> a))
((((?? :: (alpha2 -> (alpha1 -> (alpha0 -> a)))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                            (size 1) goal: (alpha2 -> (alpha1 -> (alpha0 -> a)))
(((((?? :: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))               (size 1) goal: (alpha2 -> (alpha1 -> (alpha0 -> a)))
((((?? :: (alpha2 -> (alpha1 -> (alpha0 -> a)))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                            (size 2) goal: (alpha2 -> (alpha1 -> (alpha0 -> a)))
(((GHC.List.foldl (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                                                           (size 2) goal: (a -> (tauGHC.List.foldl1 -> a))
(((GHC.List.foldl (\arg2 -> (?? :: (tauGHC.List.foldl1 -> a)))) (?? :: alpha1)) (?? :: alpha0))                                             (size 1) goal: (tauGHC.List.foldl1 -> a)
(((GHC.List.foldl' (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                                                          (size 2) goal: (a -> (tauGHC.List.foldl'1 -> a))
(((GHC.List.foldl' (\arg2 -> (?? :: (tauGHC.List.foldl'1 -> a)))) (?? :: alpha1)) (?? :: alpha0))                                           (size 1) goal: (tauGHC.List.foldl'1 -> a)
(((((?? :: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))               (size 2) goal: (alpha2 -> (alpha1 -> (alpha0 -> a)))
(((((?? :: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))               (size 1) goal: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))
((((((?? :: (alpha4 -> (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a)))))) (?? :: alpha4)) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))(size 1) goal: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))
(((?? :: (alpha1 -> (alpha0 -> a))) (?? :: alpha1)) (?? :: alpha0))                                                                         (size 4) goal: (alpha1 -> (alpha0 -> a))
((((?? :: (alpha2 -> (alpha1 -> (alpha0 -> a)))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                            (size 4) goal: (alpha1 -> (alpha0 -> a))
((((?? :: (alpha2 -> (alpha1 -> (alpha0 -> a)))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                            (size 1) goal: (alpha2 -> (alpha1 -> (alpha0 -> a)))
(((((?? :: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))               (size 1) goal: (alpha2 -> (alpha1 -> (alpha0 -> a)))
((((?? :: (alpha2 -> (alpha1 -> (alpha0 -> a)))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                            (size 2) goal: (alpha2 -> (alpha1 -> (alpha0 -> a)))
(((GHC.List.foldl (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                                                           (size 3) goal: (a -> (tauGHC.List.foldl1 -> a))
(((GHC.List.foldl (\arg2 -> (?? :: (tauGHC.List.foldl1 -> a)))) (?? :: alpha1)) (?? :: alpha0))                                             (size 2) goal: (tauGHC.List.foldl1 -> a)
(((GHC.List.foldl (\arg2 -> (\arg3 -> (?? :: a)))) (?? :: alpha1)) (?? :: alpha0))                                                          (size 1) goal: a
(((GHC.List.foldl' (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                                                          (size 3) goal: (a -> (tauGHC.List.foldl'1 -> a))
(((GHC.List.foldl' (\arg2 -> (?? :: (tauGHC.List.foldl'1 -> a)))) (?? :: alpha1)) (?? :: alpha0))                                           (size 2) goal: (tauGHC.List.foldl'1 -> a)
(((GHC.List.foldl' (\arg2 -> (\arg3 -> (?? :: a)))) (?? :: alpha1)) (?? :: alpha0))                                                         (size 1) goal: a
(((((?? :: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))               (size 2) goal: (alpha2 -> (alpha1 -> (alpha0 -> a)))
(((((?? :: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))               (size 1) goal: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))
((((((?? :: (alpha4 -> (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a)))))) (?? :: alpha4)) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))(size 1) goal: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))
((((?? :: (alpha2 -> (alpha1 -> (alpha0 -> a)))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                            (size 3) goal: (alpha2 -> (alpha1 -> (alpha0 -> a)))
(((Data.Maybe.fromMaybe (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                                                     (size 3) goal: (alpha0 -> a)
(((Data.Maybe.fromMaybe (\arg2 -> (?? :: a))) (?? :: alpha1)) (?? :: alpha0))                                                               (size 2) goal: a
(((GHC.List.foldl1 (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                                                          (size 3) goal: (((alpha0 -> a)) -> (((alpha0 -> a)) -> (alpha0 -> a)))
(((GHC.List.foldl1 (\arg2 -> (?? :: (((alpha0 -> a)) -> (alpha0 -> a))))) (?? :: alpha1)) (?? :: alpha0))                                   (size 2) goal: (((alpha0 -> a)) -> (alpha0 -> a))
(((GHC.List.foldl1' (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                                                         (size 3) goal: (((alpha0 -> a)) -> (((alpha0 -> a)) -> (alpha0 -> a)))
(((GHC.List.foldl1' (\arg2 -> (?? :: (((alpha0 -> a)) -> (alpha0 -> a))))) (?? :: alpha1)) (?? :: alpha0))                                  (size 2) goal: (((alpha0 -> a)) -> (alpha0 -> a))
(((((?? :: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))               (size 3) goal: (alpha2 -> (alpha1 -> (alpha0 -> a)))
(((((?? :: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))               (size 1) goal: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))
((((((?? :: (alpha4 -> (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a)))))) (?? :: alpha4)) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))(size 1) goal: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))
(((((?? :: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))               (size 2) goal: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))
((((((?? :: (alpha4 -> (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a)))))) (?? :: alpha4)) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))(size 2) goal: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))
((((((?? :: (alpha4 -> (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a)))))) (?? :: alpha4)) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))(size 1) goal: (alpha4 -> (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a)))))
(((((((?? :: (alpha5 -> (alpha4 -> (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))))) (?? :: alpha5)) (?? :: alpha4)) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))(size 1) goal: (alpha4 -> (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a)))))
((?? :: (alpha0 -> a)) (?? :: alpha0))                                                                                                      (size 6) goal: (alpha0 -> a)
(((?? :: (alpha1 -> (alpha0 -> a))) (?? :: alpha1)) (?? :: alpha0))                                                                         (size 6) goal: (alpha0 -> a)
(((?? :: (alpha1 -> (alpha0 -> a))) (?? :: alpha1)) (?? :: alpha0))                                                                         (size 1) goal: (alpha1 -> (alpha0 -> a))
((((?? :: (alpha2 -> (alpha1 -> (alpha0 -> a)))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                            (size 1) goal: (alpha1 -> (alpha0 -> a))
(((?? :: (alpha1 -> (alpha0 -> a))) (?? :: alpha1)) (?? :: alpha0))                                                                         (size 2) goal: (alpha1 -> (alpha0 -> a))
((Data.Maybe.fromMaybe (?? :: alpha1)) (?? :: alpha0))                                                                                      (size 5) goal: a
((Data.Maybe.fromMaybe ((?? :: (alpha2 -> a)) (?? :: alpha2))) (?? :: alpha0))                                                              (size 5) goal: a
((Data.Maybe.fromMaybe ((?? :: (alpha2 -> a)) (?? :: alpha2))) (?? :: alpha0))                                                              (size 1) goal: (alpha2 -> a)
((Data.Maybe.fromMaybe ((?? :: (alpha2 -> a)) (?? :: alpha2))) (?? :: alpha0))                                                              (size 2) goal: (alpha2 -> a)
((Data.Maybe.fromMaybe (((?? :: (alpha3 -> (alpha2 -> a))) (?? :: alpha3)) (?? :: alpha2))) (?? :: alpha0))                                 (size 2) goal: (alpha2 -> a)
((Data.Maybe.fromMaybe (((?? :: (alpha3 -> (alpha2 -> a))) (?? :: alpha3)) (?? :: alpha2))) (?? :: alpha0))                                 (size 1) goal: (alpha3 -> (alpha2 -> a))
((Data.Maybe.fromMaybe ((?? :: (alpha2 -> a)) (?? :: alpha2))) (?? :: alpha0))                                                              (size 3) goal: (alpha2 -> a)
((Data.Maybe.fromMaybe (((?? :: (alpha3 -> (alpha2 -> a))) (?? :: alpha3)) (?? :: alpha2))) (?? :: alpha0))                                 (size 3) goal: (alpha2 -> a)
((Data.Maybe.fromMaybe (((?? :: (alpha3 -> (alpha2 -> a))) (?? :: alpha3)) (?? :: alpha2))) (?? :: alpha0))                                 (size 1) goal: (alpha3 -> (alpha2 -> a))
((Data.Maybe.fromMaybe (((?? :: (alpha3 -> (alpha2 -> a))) (?? :: alpha3)) (?? :: alpha2))) (?? :: alpha0))                                 (size 2) goal: (alpha3 -> (alpha2 -> a))
((Data.Maybe.fromMaybe ((((?? :: (alpha4 -> (alpha3 -> (alpha2 -> a)))) (?? :: alpha4)) (?? :: alpha3)) (?? :: alpha2))) (?? :: alpha0))    (size 2) goal: (alpha3 -> (alpha2 -> a))
((Data.Maybe.fromMaybe ((((?? :: (alpha4 -> (alpha3 -> (alpha2 -> a)))) (?? :: alpha4)) (?? :: alpha3)) (?? :: alpha2))) (?? :: alpha0))    (size 1) goal: (alpha4 -> (alpha3 -> (alpha2 -> a)))
((Data.Maybe.fromMaybe ((?? :: (alpha2 -> a)) (?? :: alpha2))) (?? :: alpha0))                                                              (size 4) goal: (alpha2 -> a)
((Data.Maybe.fromMaybe (((?? :: (alpha3 -> (alpha2 -> a))) (?? :: alpha3)) (?? :: alpha2))) (?? :: alpha0))                                 (size 4) goal: (alpha2 -> a)
((Data.Maybe.fromMaybe (((?? :: (alpha3 -> (alpha2 -> a))) (?? :: alpha3)) (?? :: alpha2))) (?? :: alpha0))                                 (size 1) goal: (alpha3 -> (alpha2 -> a))
((Data.Maybe.fromMaybe (((?? :: (alpha3 -> (alpha2 -> a))) (?? :: alpha3)) (?? :: alpha2))) (?? :: alpha0))                                 (size 2) goal: (alpha3 -> (alpha2 -> a))
((Data.Maybe.fromMaybe ((((?? :: (alpha4 -> (alpha3 -> (alpha2 -> a)))) (?? :: alpha4)) (?? :: alpha3)) (?? :: alpha2))) (?? :: alpha0))    (size 2) goal: (alpha3 -> (alpha2 -> a))
((Data.Maybe.fromMaybe ((((?? :: (alpha4 -> (alpha3 -> (alpha2 -> a)))) (?? :: alpha4)) (?? :: alpha3)) (?? :: alpha2))) (?? :: alpha0))    (size 1) goal: (alpha4 -> (alpha3 -> (alpha2 -> a)))
((Data.Maybe.fromMaybe (((?? :: (alpha3 -> (alpha2 -> a))) (?? :: alpha3)) (?? :: alpha2))) (?? :: alpha0))                                 (size 3) goal: (alpha3 -> (alpha2 -> a))
((Data.Maybe.fromMaybe ((Data.Maybe.fromMaybe (?? :: alpha3)) (?? :: alpha2))) (?? :: alpha0))                                              (size 3) goal: a
((Data.Maybe.fromMaybe (Data.Maybe.fromMaybe arg0 (?? :: alpha2))) (?? :: alpha0))                                                          (size 3) goal: Maybe (a)
((Data.Maybe.fromMaybe (Data.Maybe.fromMaybe arg0 ((?? :: (alpha4 -> Maybe (a))) (?? :: alpha4)))) (?? :: alpha0))                          (size 3) goal: Maybe (a)
((Data.Maybe.fromMaybe (Data.Maybe.fromMaybe arg0 ((?? :: (alpha4 -> Maybe (a))) (?? :: alpha4)))) (?? :: alpha0))                          (size 1) goal: (alpha4 -> Maybe (a))
((Data.Maybe.fromMaybe (Data.Maybe.fromMaybe arg0 ((?? :: (alpha4 -> Maybe (a))) (?? :: alpha4)))) (?? :: alpha0))                          (size 2) goal: (alpha4 -> Maybe (a))
((Data.Maybe.fromMaybe ((Data.Maybe.fromMaybe ((?? :: (alpha4 -> a)) (?? :: alpha4))) (?? :: alpha2))) (?? :: alpha0))                      (size 3) goal: a
((Data.Maybe.fromMaybe ((Data.Maybe.fromMaybe ((?? :: (alpha4 -> a)) (?? :: alpha4))) (?? :: alpha2))) (?? :: alpha0))                      (size 1) goal: (alpha4 -> a)
((Data.Maybe.fromMaybe ((Data.Maybe.fromMaybe ((?? :: (alpha4 -> a)) (?? :: alpha4))) (?? :: alpha2))) (?? :: alpha0))                      (size 2) goal: (alpha4 -> a)
((Data.Maybe.fromMaybe ((GHC.List.foldl1 (?? :: alpha3)) (?? :: alpha2))) (?? :: alpha0))                                                   (size 3) goal: (a -> (a -> a))
((Data.Maybe.fromMaybe ((GHC.List.foldl1 (\arg2 -> (?? :: (a -> a)))) (?? :: alpha2))) (?? :: alpha0))                                      (size 2) goal: (a -> a)
((Data.Maybe.fromMaybe ((GHC.List.foldl1' (?? :: alpha3)) (?? :: alpha2))) (?? :: alpha0))                                                  (size 3) goal: (a -> (a -> a))
((Data.Maybe.fromMaybe ((GHC.List.foldl1' (\arg2 -> (?? :: (a -> a)))) (?? :: alpha2))) (?? :: alpha0))                                     (size 2) goal: (a -> a)
((Data.Maybe.fromMaybe ((((?? :: (alpha4 -> (alpha3 -> (alpha2 -> a)))) (?? :: alpha4)) (?? :: alpha3)) (?? :: alpha2))) (?? :: alpha0))    (size 3) goal: (alpha3 -> (alpha2 -> a))
((Data.Maybe.fromMaybe ((((?? :: (alpha4 -> (alpha3 -> (alpha2 -> a)))) (?? :: alpha4)) (?? :: alpha3)) (?? :: alpha2))) (?? :: alpha0))    (size 1) goal: (alpha4 -> (alpha3 -> (alpha2 -> a)))
((Data.Maybe.fromMaybe ((((?? :: (alpha4 -> (alpha3 -> (alpha2 -> a)))) (?? :: alpha4)) (?? :: alpha3)) (?? :: alpha2))) (?? :: alpha0))    (size 2) goal: (alpha4 -> (alpha3 -> (alpha2 -> a)))
((Data.Maybe.fromMaybe (((((?? :: (alpha5 -> (alpha4 -> (alpha3 -> (alpha2 -> a))))) (?? :: alpha5)) (?? :: alpha4)) (?? :: alpha3)) (?? :: alpha2))) (?? :: alpha0))(size 2) goal: (alpha4 -> (alpha3 -> (alpha2 -> a)))
((Data.Maybe.fromMaybe (((((?? :: (alpha5 -> (alpha4 -> (alpha3 -> (alpha2 -> a))))) (?? :: alpha5)) (?? :: alpha4)) (?? :: alpha3)) (?? :: alpha2))) (?? :: alpha0))(size 1) goal: (alpha5 -> (alpha4 -> (alpha3 -> (alpha2 -> a))))
((GHC.List.foldl1 (?? :: alpha1)) (?? :: alpha0))                                                                                           (size 5) goal: (a -> (a -> a))
((GHC.List.foldl1 (\arg2 -> (?? :: (a -> a)))) (?? :: alpha0))                                                                              (size 4) goal: (a -> a)
((GHC.List.foldl1 (\arg2 -> (\arg3 -> (?? :: a)))) (?? :: alpha0))                                                                          (size 3) goal: a
((GHC.List.foldl1 (\arg2 -> (\arg3 -> ((?? :: (alpha2 -> a)) (?? :: alpha2))))) (?? :: alpha0))                                             (size 3) goal: a
((GHC.List.foldl1 (\arg2 -> (\arg3 -> ((?? :: (alpha2 -> a)) (?? :: alpha2))))) (?? :: alpha0))                                             (size 1) goal: (alpha2 -> a)
((GHC.List.foldl1 (\arg2 -> (\arg3 -> ((?? :: (alpha2 -> a)) (?? :: alpha2))))) (?? :: alpha0))                                             (size 2) goal: (alpha2 -> a)
((GHC.List.foldl1 (\arg2 -> (\arg3 -> (((?? :: (alpha3 -> (alpha2 -> a))) (?? :: alpha3)) (?? :: alpha2))))) (?? :: alpha0))                (size 2) goal: (alpha2 -> a)
((GHC.List.foldl1 (\arg2 -> (\arg3 -> (((?? :: (alpha3 -> (alpha2 -> a))) (?? :: alpha3)) (?? :: alpha2))))) (?? :: alpha0))                (size 1) goal: (alpha3 -> (alpha2 -> a))
((GHC.List.foldl1' (?? :: alpha1)) (?? :: alpha0))                                                                                          (size 5) goal: (a -> (a -> a))
((GHC.List.foldl1' (\arg2 -> (?? :: (a -> a)))) (?? :: alpha0))                                                                             (size 4) goal: (a -> a)
((GHC.List.foldl1' (\arg2 -> (\arg3 -> (?? :: a)))) (?? :: alpha0))                                                                         (size 3) goal: a
((GHC.List.foldl1' (\arg2 -> (\arg3 -> ((?? :: (alpha2 -> a)) (?? :: alpha2))))) (?? :: alpha0))                                            (size 3) goal: a
((GHC.List.foldl1' (\arg2 -> (\arg3 -> ((?? :: (alpha2 -> a)) (?? :: alpha2))))) (?? :: alpha0))                                            (size 1) goal: (alpha2 -> a)
((GHC.List.foldl1' (\arg2 -> (\arg3 -> ((?? :: (alpha2 -> a)) (?? :: alpha2))))) (?? :: alpha0))                                            (size 2) goal: (alpha2 -> a)
((GHC.List.foldl1' (\arg2 -> (\arg3 -> (((?? :: (alpha3 -> (alpha2 -> a))) (?? :: alpha3)) (?? :: alpha2))))) (?? :: alpha0))               (size 2) goal: (alpha2 -> a)
((GHC.List.foldl1' (\arg2 -> (\arg3 -> (((?? :: (alpha3 -> (alpha2 -> a))) (?? :: alpha3)) (?? :: alpha2))))) (?? :: alpha0))               (size 1) goal: (alpha3 -> (alpha2 -> a))
((((?? :: (alpha2 -> (alpha1 -> (alpha0 -> a)))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                            (size 2) goal: (alpha1 -> (alpha0 -> a))
((((?? :: (alpha2 -> (alpha1 -> (alpha0 -> a)))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                            (size 1) goal: (alpha2 -> (alpha1 -> (alpha0 -> a)))
(((((?? :: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))               (size 1) goal: (alpha2 -> (alpha1 -> (alpha0 -> a)))
(((?? :: (alpha1 -> (alpha0 -> a))) (?? :: alpha1)) (?? :: alpha0))                                                                         (size 3) goal: (alpha1 -> (alpha0 -> a))
((((?? :: (alpha2 -> (alpha1 -> (alpha0 -> a)))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                            (size 3) goal: (alpha1 -> (alpha0 -> a))
((((?? :: (alpha2 -> (alpha1 -> (alpha0 -> a)))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                            (size 1) goal: (alpha2 -> (alpha1 -> (alpha0 -> a)))
(((((?? :: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))               (size 1) goal: (alpha2 -> (alpha1 -> (alpha0 -> a)))
((((?? :: (alpha2 -> (alpha1 -> (alpha0 -> a)))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                            (size 2) goal: (alpha2 -> (alpha1 -> (alpha0 -> a)))
(((GHC.List.foldl (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                                                           (size 2) goal: (a -> (tauGHC.List.foldl1 -> a))
(((GHC.List.foldl (\arg2 -> (?? :: (tauGHC.List.foldl1 -> a)))) (?? :: alpha1)) (?? :: alpha0))                                             (size 1) goal: (tauGHC.List.foldl1 -> a)
(((GHC.List.foldl' (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                                                          (size 2) goal: (a -> (tauGHC.List.foldl'1 -> a))
(((GHC.List.foldl' (\arg2 -> (?? :: (tauGHC.List.foldl'1 -> a)))) (?? :: alpha1)) (?? :: alpha0))                                           (size 1) goal: (tauGHC.List.foldl'1 -> a)
(((((?? :: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))               (size 2) goal: (alpha2 -> (alpha1 -> (alpha0 -> a)))
(((((?? :: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))               (size 1) goal: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))
((((((?? :: (alpha4 -> (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a)))))) (?? :: alpha4)) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))(size 1) goal: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))
(((?? :: (alpha1 -> (alpha0 -> a))) (?? :: alpha1)) (?? :: alpha0))                                                                         (size 4) goal: (alpha1 -> (alpha0 -> a))
((((?? :: (alpha2 -> (alpha1 -> (alpha0 -> a)))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                            (size 4) goal: (alpha1 -> (alpha0 -> a))
((((?? :: (alpha2 -> (alpha1 -> (alpha0 -> a)))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                            (size 1) goal: (alpha2 -> (alpha1 -> (alpha0 -> a)))
(((((?? :: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))               (size 1) goal: (alpha2 -> (alpha1 -> (alpha0 -> a)))
((((?? :: (alpha2 -> (alpha1 -> (alpha0 -> a)))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                            (size 2) goal: (alpha2 -> (alpha1 -> (alpha0 -> a)))
(((GHC.List.foldl (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                                                           (size 3) goal: (a -> (tauGHC.List.foldl1 -> a))
(((GHC.List.foldl (\arg2 -> (?? :: (tauGHC.List.foldl1 -> a)))) (?? :: alpha1)) (?? :: alpha0))                                             (size 2) goal: (tauGHC.List.foldl1 -> a)
(((GHC.List.foldl (\arg2 -> (\arg3 -> (?? :: a)))) (?? :: alpha1)) (?? :: alpha0))                                                          (size 1) goal: a
(((GHC.List.foldl' (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                                                          (size 3) goal: (a -> (tauGHC.List.foldl'1 -> a))
(((GHC.List.foldl' (\arg2 -> (?? :: (tauGHC.List.foldl'1 -> a)))) (?? :: alpha1)) (?? :: alpha0))                                           (size 2) goal: (tauGHC.List.foldl'1 -> a)
(((GHC.List.foldl' (\arg2 -> (\arg3 -> (?? :: a)))) (?? :: alpha1)) (?? :: alpha0))                                                         (size 1) goal: a
(((((?? :: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))               (size 2) goal: (alpha2 -> (alpha1 -> (alpha0 -> a)))
(((((?? :: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))               (size 1) goal: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))
((((((?? :: (alpha4 -> (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a)))))) (?? :: alpha4)) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))(size 1) goal: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))
((((?? :: (alpha2 -> (alpha1 -> (alpha0 -> a)))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                            (size 3) goal: (alpha2 -> (alpha1 -> (alpha0 -> a)))
(((Data.Maybe.fromMaybe (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                                                     (size 3) goal: (alpha0 -> a)
(((Data.Maybe.fromMaybe (\arg2 -> (?? :: a))) (?? :: alpha1)) (?? :: alpha0))                                                               (size 2) goal: a
(((GHC.List.foldl1 (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                                                          (size 3) goal: (((alpha0 -> a)) -> (((alpha0 -> a)) -> (alpha0 -> a)))
(((GHC.List.foldl1 (\arg2 -> (?? :: (((alpha0 -> a)) -> (alpha0 -> a))))) (?? :: alpha1)) (?? :: alpha0))                                   (size 2) goal: (((alpha0 -> a)) -> (alpha0 -> a))
(((GHC.List.foldl1' (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                                                         (size 3) goal: (((alpha0 -> a)) -> (((alpha0 -> a)) -> (alpha0 -> a)))
(((GHC.List.foldl1' (\arg2 -> (?? :: (((alpha0 -> a)) -> (alpha0 -> a))))) (?? :: alpha1)) (?? :: alpha0))                                  (size 2) goal: (((alpha0 -> a)) -> (alpha0 -> a))
(((((?? :: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))               (size 3) goal: (alpha2 -> (alpha1 -> (alpha0 -> a)))
(((((?? :: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))               (size 1) goal: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))
((((((?? :: (alpha4 -> (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a)))))) (?? :: alpha4)) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))(size 1) goal: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))
(((((?? :: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))               (size 2) goal: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))
((((((?? :: (alpha4 -> (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a)))))) (?? :: alpha4)) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))(size 2) goal: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))
((((((?? :: (alpha4 -> (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a)))))) (?? :: alpha4)) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))(size 1) goal: (alpha4 -> (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a)))))
(((((((?? :: (alpha5 -> (alpha4 -> (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))))) (?? :: alpha5)) (?? :: alpha4)) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))(size 1) goal: (alpha4 -> (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a)))))
(((?? :: (alpha1 -> (alpha0 -> a))) (?? :: alpha1)) (?? :: alpha0))                                                                         (size 5) goal: (alpha1 -> (alpha0 -> a))
((((?? :: (alpha2 -> (alpha1 -> (alpha0 -> a)))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                            (size 5) goal: (alpha1 -> (alpha0 -> a))
((((?? :: (alpha2 -> (alpha1 -> (alpha0 -> a)))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                            (size 1) goal: (alpha2 -> (alpha1 -> (alpha0 -> a)))
(((((?? :: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))               (size 1) goal: (alpha2 -> (alpha1 -> (alpha0 -> a)))
((((?? :: (alpha2 -> (alpha1 -> (alpha0 -> a)))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                            (size 2) goal: (alpha2 -> (alpha1 -> (alpha0 -> a)))
(((GHC.List.foldl (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                                                           (size 4) goal: (a -> (tauGHC.List.foldl1 -> a))
(((GHC.List.foldl (\arg2 -> (?? :: (tauGHC.List.foldl1 -> a)))) (?? :: alpha1)) (?? :: alpha0))                                             (size 3) goal: (tauGHC.List.foldl1 -> a)
(((GHC.List.foldl (\arg2 -> (\arg3 -> (?? :: a)))) (?? :: alpha1)) (?? :: alpha0))                                                          (size 2) goal: a
((GHC.List.foldl (\arg2 -> \arg3 -> arg0) (?? :: alpha1)) (?? :: alpha0))                                                                   (size 2) goal: a
(GHC.List.foldl (\arg2 -> \arg3 -> arg0) arg0 (?? :: alpha0))                                                                               (size 2) goal: [tauGHC.List.foldl1]
(GHC.List.foldl (\arg2 -> \arg3 -> arg0) arg0 ((?? :: (alpha3 -> [tauGHC.List.foldl1])) (?? :: alpha3)))                                    (size 2) goal: [tauGHC.List.foldl1]
(GHC.List.foldl (\arg2 -> \arg3 -> arg0) arg0 ((?? :: (alpha3 -> [tauGHC.List.foldl1])) (?? :: alpha3)))                                    (size 1) goal: (alpha3 -> [tauGHC.List.foldl1])
((GHC.List.foldl (\arg2 -> \arg3 -> arg0) ((?? :: (alpha3 -> a)) (?? :: alpha3))) (?? :: alpha0))                                           (size 2) goal: a
((GHC.List.foldl (\arg2 -> \arg3 -> arg0) ((?? :: (alpha3 -> a)) (?? :: alpha3))) (?? :: alpha0))                                           (size 1) goal: (alpha3 -> a)
((GHC.List.foldl (\arg2 -> \arg3 -> arg2) (?? :: alpha1)) (?? :: alpha0))                                                                   (size 2) goal: a
(GHC.List.foldl (\arg2 -> \arg3 -> arg2) arg0 (?? :: alpha0))                                                                               (size 2) goal: [tauGHC.List.foldl1]
(GHC.List.foldl (\arg2 -> \arg3 -> arg2) arg0 ((?? :: (alpha3 -> [tauGHC.List.foldl1])) (?? :: alpha3)))                                    (size 2) goal: [tauGHC.List.foldl1]
(GHC.List.foldl (\arg2 -> \arg3 -> arg2) arg0 ((?? :: (alpha3 -> [tauGHC.List.foldl1])) (?? :: alpha3)))                                    (size 1) goal: (alpha3 -> [tauGHC.List.foldl1])
((GHC.List.foldl (\arg2 -> \arg3 -> arg2) ((?? :: (alpha3 -> a)) (?? :: alpha3))) (?? :: alpha0))                                           (size 2) goal: a
((GHC.List.foldl (\arg2 -> \arg3 -> arg2) ((?? :: (alpha3 -> a)) (?? :: alpha3))) (?? :: alpha0))                                           (size 1) goal: (alpha3 -> a)
(((GHC.List.foldl (\arg2 -> (\arg3 -> ((?? :: (alpha3 -> a)) (?? :: alpha3))))) (?? :: alpha1)) (?? :: alpha0))                             (size 2) goal: a
(((GHC.List.foldl (\arg2 -> (\arg3 -> ((?? :: (alpha3 -> a)) (?? :: alpha3))))) (?? :: alpha1)) (?? :: alpha0))                             (size 1) goal: (alpha3 -> a)
(((GHC.List.foldl' (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                                                          (size 4) goal: (a -> (tauGHC.List.foldl'1 -> a))
(((GHC.List.foldl' (\arg2 -> (?? :: (tauGHC.List.foldl'1 -> a)))) (?? :: alpha1)) (?? :: alpha0))                                           (size 3) goal: (tauGHC.List.foldl'1 -> a)
(((GHC.List.foldl' (\arg2 -> (\arg3 -> (?? :: a)))) (?? :: alpha1)) (?? :: alpha0))                                                         (size 2) goal: a
((GHC.List.foldl' (\arg2 -> \arg3 -> arg0) (?? :: alpha1)) (?? :: alpha0))                                                                  (size 2) goal: a
(GHC.List.foldl' (\arg2 -> \arg3 -> arg0) arg0 (?? :: alpha0))                                                                              (size 2) goal: [tauGHC.List.foldl'1]
(GHC.List.foldl' (\arg2 -> \arg3 -> arg0) arg0 ((?? :: (alpha3 -> [tauGHC.List.foldl'1])) (?? :: alpha3)))                                  (size 2) goal: [tauGHC.List.foldl'1]
(GHC.List.foldl' (\arg2 -> \arg3 -> arg0) arg0 ((?? :: (alpha3 -> [tauGHC.List.foldl'1])) (?? :: alpha3)))                                  (size 1) goal: (alpha3 -> [tauGHC.List.foldl'1])
((GHC.List.foldl' (\arg2 -> \arg3 -> arg0) ((?? :: (alpha3 -> a)) (?? :: alpha3))) (?? :: alpha0))                                          (size 2) goal: a
((GHC.List.foldl' (\arg2 -> \arg3 -> arg0) ((?? :: (alpha3 -> a)) (?? :: alpha3))) (?? :: alpha0))                                          (size 1) goal: (alpha3 -> a)
((GHC.List.foldl' (\arg2 -> \arg3 -> arg2) (?? :: alpha1)) (?? :: alpha0))                                                                  (size 2) goal: a
(GHC.List.foldl' (\arg2 -> \arg3 -> arg2) arg0 (?? :: alpha0))                                                                              (size 2) goal: [tauGHC.List.foldl'1]
(GHC.List.foldl' (\arg2 -> \arg3 -> arg2) arg0 ((?? :: (alpha3 -> [tauGHC.List.foldl'1])) (?? :: alpha3)))                                  (size 2) goal: [tauGHC.List.foldl'1]
(GHC.List.foldl' (\arg2 -> \arg3 -> arg2) arg0 ((?? :: (alpha3 -> [tauGHC.List.foldl'1])) (?? :: alpha3)))                                  (size 1) goal: (alpha3 -> [tauGHC.List.foldl'1])
((GHC.List.foldl' (\arg2 -> \arg3 -> arg2) ((?? :: (alpha3 -> a)) (?? :: alpha3))) (?? :: alpha0))                                          (size 2) goal: a
((GHC.List.foldl' (\arg2 -> \arg3 -> arg2) ((?? :: (alpha3 -> a)) (?? :: alpha3))) (?? :: alpha0))                                          (size 1) goal: (alpha3 -> a)
(((GHC.List.foldl' (\arg2 -> (\arg3 -> ((?? :: (alpha3 -> a)) (?? :: alpha3))))) (?? :: alpha1)) (?? :: alpha0))                            (size 2) goal: a
(((GHC.List.foldl' (\arg2 -> (\arg3 -> ((?? :: (alpha3 -> a)) (?? :: alpha3))))) (?? :: alpha1)) (?? :: alpha0))                            (size 1) goal: (alpha3 -> a)
(((((?? :: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))               (size 2) goal: (alpha2 -> (alpha1 -> (alpha0 -> a)))
(((((?? :: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))               (size 1) goal: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))
((((((?? :: (alpha4 -> (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a)))))) (?? :: alpha4)) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))(size 1) goal: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))
((((?? :: (alpha2 -> (alpha1 -> (alpha0 -> a)))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                            (size 3) goal: (alpha2 -> (alpha1 -> (alpha0 -> a)))
(((Data.Maybe.fromMaybe (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                                                     (size 4) goal: (alpha0 -> a)
(((Data.Maybe.fromMaybe (\arg2 -> (?? :: a))) (?? :: alpha1)) (?? :: alpha0))                                                               (size 3) goal: a
((Data.Maybe.fromMaybe (\arg2 -> arg0) (?? :: alpha1)) (?? :: alpha0))                                                                      (size 3) goal: Maybe (((alpha0 -> a)))
((Data.Maybe.fromMaybe (\arg2 -> arg0) ((?? :: (alpha3 -> Maybe (((alpha0 -> a))))) (?? :: alpha3))) (?? :: alpha0))                        (size 3) goal: Maybe (((alpha0 -> a)))
((Data.Maybe.fromMaybe (\arg2 -> arg0) ((?? :: (alpha3 -> Maybe (((alpha0 -> a))))) (?? :: alpha3))) (?? :: alpha0))                        (size 1) goal: (alpha3 -> Maybe (((alpha0 -> a))))
((Data.Maybe.fromMaybe (\arg2 -> arg0) ((?? :: (alpha3 -> Maybe (((alpha0 -> a))))) (?? :: alpha3))) (?? :: alpha0))                        (size 2) goal: (alpha3 -> Maybe (((alpha0 -> a))))
((Data.Maybe.fromMaybe (\arg2 -> arg2) (?? :: alpha1)) (?? :: alpha0))                                                                      (size 3) goal: Maybe (((a -> a)))
((Data.Maybe.fromMaybe (\arg2 -> arg2) ((?? :: (alpha3 -> Maybe (((a -> a))))) (?? :: alpha3))) (?? :: alpha0))                             (size 3) goal: Maybe (((a -> a)))
((Data.Maybe.fromMaybe (\arg2 -> arg2) ((?? :: (alpha3 -> Maybe (((a -> a))))) (?? :: alpha3))) (?? :: alpha0))                             (size 1) goal: (alpha3 -> Maybe (((a -> a))))
((Data.Maybe.fromMaybe (\arg2 -> arg2) ((?? :: (alpha3 -> Maybe (((a -> a))))) (?? :: alpha3))) (?? :: alpha0))                             (size 2) goal: (alpha3 -> Maybe (((a -> a))))
(((Data.Maybe.fromMaybe (\arg2 -> ((?? :: (alpha3 -> a)) (?? :: alpha3)))) (?? :: alpha1)) (?? :: alpha0))                                  (size 3) goal: a
(((Data.Maybe.fromMaybe (\arg2 -> ((?? :: (alpha3 -> a)) (?? :: alpha3)))) (?? :: alpha1)) (?? :: alpha0))                                  (size 1) goal: (alpha3 -> a)
(((Data.Maybe.fromMaybe (\arg2 -> ((?? :: (alpha3 -> a)) (?? :: alpha3)))) (?? :: alpha1)) (?? :: alpha0))                                  (size 2) goal: (alpha3 -> a)
(((GHC.List.foldl1 (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                                                          (size 4) goal: (((alpha0 -> a)) -> (((alpha0 -> a)) -> (alpha0 -> a)))
(((GHC.List.foldl1 (\arg2 -> (?? :: (((alpha0 -> a)) -> (alpha0 -> a))))) (?? :: alpha1)) (?? :: alpha0))                                   (size 3) goal: (((alpha0 -> a)) -> (alpha0 -> a))
(((GHC.List.foldl1 (\arg2 -> (\arg3 -> (?? :: (alpha0 -> a))))) (?? :: alpha1)) (?? :: alpha0))                                             (size 2) goal: (alpha0 -> a)
(((GHC.List.foldl1' (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                                                         (size 4) goal: (((alpha0 -> a)) -> (((alpha0 -> a)) -> (alpha0 -> a)))
(((GHC.List.foldl1' (\arg2 -> (?? :: (((alpha0 -> a)) -> (alpha0 -> a))))) (?? :: alpha1)) (?? :: alpha0))                                  (size 3) goal: (((alpha0 -> a)) -> (alpha0 -> a))
(((GHC.List.foldl1' (\arg2 -> (\arg3 -> (?? :: (alpha0 -> a))))) (?? :: alpha1)) (?? :: alpha0))                                            (size 2) goal: (alpha0 -> a)
(((((?? :: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))               (size 3) goal: (alpha2 -> (alpha1 -> (alpha0 -> a)))
(((((?? :: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))               (size 1) goal: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))
((((((?? :: (alpha4 -> (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a)))))) (?? :: alpha4)) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))(size 1) goal: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))
(((((?? :: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))               (size 2) goal: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))
((((((?? :: (alpha4 -> (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a)))))) (?? :: alpha4)) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))(size 2) goal: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))
((((((?? :: (alpha4 -> (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a)))))) (?? :: alpha4)) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))(size 1) goal: (alpha4 -> (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a)))))
(((((((?? :: (alpha5 -> (alpha4 -> (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))))) (?? :: alpha5)) (?? :: alpha4)) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))(size 1) goal: (alpha4 -> (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a)))))
((((?? :: (alpha2 -> (alpha1 -> (alpha0 -> a)))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                            (size 4) goal: (alpha2 -> (alpha1 -> (alpha0 -> a)))
(((((?? :: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))               (size 4) goal: (alpha2 -> (alpha1 -> (alpha0 -> a)))
(((((?? :: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))               (size 1) goal: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))
((((((?? :: (alpha4 -> (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a)))))) (?? :: alpha4)) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))(size 1) goal: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))
(((((?? :: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))               (size 2) goal: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))
((((((?? :: (alpha4 -> (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a)))))) (?? :: alpha4)) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))(size 2) goal: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))
((((((?? :: (alpha4 -> (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a)))))) (?? :: alpha4)) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))(size 1) goal: (alpha4 -> (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a)))))
(((((((?? :: (alpha5 -> (alpha4 -> (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))))) (?? :: alpha5)) (?? :: alpha4)) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))(size 1) goal: (alpha4 -> (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a)))))
(((((?? :: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))               (size 3) goal: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))
((((GHC.List.foldl (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                                          (size 3) goal: (((alpha0 -> a)) -> (tauGHC.List.foldl1 -> (alpha0 -> a)))
((((GHC.List.foldl (\arg2 -> (?? :: (tauGHC.List.foldl1 -> (alpha0 -> a))))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                (size 2) goal: (tauGHC.List.foldl1 -> (alpha0 -> a))
((((GHC.List.foldl' (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                                         (size 3) goal: (((alpha0 -> a)) -> (tauGHC.List.foldl'1 -> (alpha0 -> a)))
((((GHC.List.foldl' (\arg2 -> (?? :: (tauGHC.List.foldl'1 -> (alpha0 -> a))))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))              (size 2) goal: (tauGHC.List.foldl'1 -> (alpha0 -> a))
((((((?? :: (alpha4 -> (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a)))))) (?? :: alpha4)) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))(size 3) goal: (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))
((((((?? :: (alpha4 -> (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a)))))) (?? :: alpha4)) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))(size 1) goal: (alpha4 -> (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a)))))
(((((((?? :: (alpha5 -> (alpha4 -> (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))))) (?? :: alpha5)) (?? :: alpha4)) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))(size 1) goal: (alpha4 -> (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a)))))
((((((?? :: (alpha4 -> (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a)))))) (?? :: alpha4)) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))(size 2) goal: (alpha4 -> (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a)))))
(((((((?? :: (alpha5 -> (alpha4 -> (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))))) (?? :: alpha5)) (?? :: alpha4)) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))(size 2) goal: (alpha4 -> (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a)))))
(((((((?? :: (alpha5 -> (alpha4 -> (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))))) (?? :: alpha5)) (?? :: alpha4)) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))(size 1) goal: (alpha5 -> (alpha4 -> (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))))
((((((((?? :: (alpha6 -> (alpha5 -> (alpha4 -> (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a)))))))) (?? :: alpha6)) (?? :: alpha5)) (?? :: alpha4)) (?? :: alpha3)) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))(size 1) goal: (alpha5 -> (alpha4 -> (alpha3 -> (alpha2 -> (alpha1 -> (alpha0 -> a))))))

running dfsExactly on <a> . (a -> ([Maybe (a)] -> a)) at size 8
(?? :: a)                                                                                                                                   (size 8) goal: a
((?? :: (alpha0 -> a)) (?? :: alpha0))                                                                                                      (size 8) goal: a
((?? :: (alpha0 -> a)) (?? :: alpha0))                                                                                                      (size 1) goal: (alpha0 -> a)
(((?? :: (alpha1 -> (alpha0 -> a))) (?? :: alpha1)) (?? :: alpha0))                                                                         (size 1) goal: (alpha0 -> a)
((?? :: (alpha0 -> a)) (?? :: alpha0))                                                                                                      (size 2) goal: (alpha0 -> a)
(((?? :: (alpha1 -> (alpha0 -> a))) (?? :: alpha1)) (?? :: alpha0))                                                                         (size 2) goal: (alpha0 -> a)
(((?? :: (alpha1 -> (alpha0 -> a))) (?? :: alpha1)) (?? :: alpha0))                                                                         (size 1) goal: (alpha1 -> (alpha0 -> a))
((((?? :: (alpha2 -> (alpha1 -> (alpha0 -> a)))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                            (size 1) goal: (alpha1 -> (alpha0 -> a))
((?? :: (alpha0 -> a)) (?? :: alpha0))                                                                                                      (size 3) goal: (alpha0 -> a)
(((?? :: (alpha1 -> (alpha0 -> a))) (?? :: alpha1)) (?? :: alpha0))                                                                         (size 3) goal: (alpha0 -> a)
(((?? :: (alpha1 -> (alpha0 -> a))) (?? :: alpha1)) (?? :: alpha0))                                                                         (size 1) goal: (alpha1 -> (alpha0 -> a))
((((?? :: (alpha2 -> (alpha1 -> (alpha0 -> a)))) (?? :: alpha2)) (?? :: alpha1)) (?? :: alpha0))                                            (size 1) goal: (alpha1 -> (alpha0 -> a))
(((?? :: (alpha1 -> (alpha0 -> a))) (?? :: alpha1)) (?? :: alpha0))                                                                         (size 2) goal: (alpha1 -> (alpha0 -> a))
((Data.Maybe.fromMaybe (?? :: alpha1)) (?? :: alpha0))                                                                                      (size 2) goal: a
(Data.Maybe.fromMaybe arg0 (?? :: alpha0))                                                                                                  (size 6) goal: Maybe (a)
(Data.Maybe.fromMaybe arg0 ((?? :: (alpha2 -> Maybe (a))) (?? :: alpha2)))                                                                  (size 6) goal: Maybe (a)
(Data.Maybe.fromMaybe arg0 ((?? :: (alpha2 -> Maybe (a))) (?? :: alpha2)))                                                                  (size 1) goal: (alpha2 -> Maybe (a))
(Data.Maybe.fromMaybe arg0 ((?? :: (alpha2 -> Maybe (a))) (?? :: alpha2)))                                                                  (size 2) goal: (alpha2 -> Maybe (a))
(Data.Maybe.fromMaybe arg0 (((?? :: (alpha3 -> (alpha2 -> Maybe (a)))) (?? :: alpha3)) (?? :: alpha2)))                                     (size 2) goal: (alpha2 -> Maybe (a))
(Data.Maybe.fromMaybe arg0 (((?? :: (alpha3 -> (alpha2 -> Maybe (a)))) (?? :: alpha3)) (?? :: alpha2)))                                     (size 1) goal: (alpha3 -> (alpha2 -> Maybe (a)))
(Data.Maybe.fromMaybe arg0 ((?? :: (alpha2 -> Maybe (a))) (?? :: alpha2)))                                                                  (size 3) goal: (alpha2 -> Maybe (a))
(Data.Maybe.fromMaybe arg0 (Data.Maybe.listToMaybe (?? :: alpha2)))                                                                         (size 5) goal: [a]
(Data.Maybe.fromMaybe arg0 (Data.Maybe.listToMaybe ((?? :: (alpha3 -> [a])) (?? :: alpha3))))                                               (size 5) goal: [a]
(Data.Maybe.fromMaybe arg0 (Data.Maybe.listToMaybe ((?? :: (alpha3 -> [a])) (?? :: alpha3))))                                               (size 1) goal: (alpha3 -> [a])
(Data.Maybe.fromMaybe arg0 (Data.Maybe.listToMaybe ((?? :: (alpha3 -> [a])) (?? :: alpha3))))                                               (size 2) goal: (alpha3 -> [a])
(Data.Maybe.fromMaybe arg0 (Data.Maybe.listToMaybe ((?? :: (alpha3 -> [a])) (?? :: alpha3))))                                               (size 3) goal: (alpha3 -> [a])
(Data.Maybe.fromMaybe arg0 (Data.Maybe.listToMaybe (((?? :: (alpha4 -> (alpha3 -> [a]))) (?? :: alpha4)) (?? :: alpha3))))                  (size 3) goal: (alpha3 -> [a])
(Data.Maybe.fromMaybe arg0 (Data.Maybe.listToMaybe (((?? :: (alpha4 -> (alpha3 -> [a]))) (?? :: alpha4)) (?? :: alpha3))))                  (size 1) goal: (alpha4 -> (alpha3 -> [a]))
(Data.Maybe.fromMaybe arg0 (Data.Maybe.listToMaybe (((?? :: (alpha4 -> (alpha3 -> [a]))) (?? :: alpha4)) (?? :: alpha3))))                  (size 2) goal: (alpha4 -> (alpha3 -> [a]))
(Data.Maybe.fromMaybe arg0 (Data.Maybe.listToMaybe ((?? :: (alpha3 -> [a])) (?? :: alpha3))))                                               (size 4) goal: (alpha3 -> [a])
(Data.Maybe.fromMaybe arg0 (Data.Maybe.listToMaybe (Data.Maybe.catMaybes (?? :: alpha3))))                                                  (size 4) goal: [Maybe (a)]

RESULTS:{"outCandidates":[{"outExamples":[{"inputs":["3","[Nothing, Just 2, Nothing]"],"output":"2"},{"inputs":["3","[]"],"output":"3"}],"solution":"\\arg0 arg1 -> Data.Maybe.fromMaybe arg0 (Data.Maybe.listToMaybe (Data.Maybe.catMaybes arg1))"}],"outDocs":[{"functionSig":"[Maybe a] -> [a]","functionName":"catMaybes","functionDesc":"The catMaybes function takes a list of Maybes and\nreturns a list of all the Just values.\n\nExamples\n\nBasic usage:\n\n\n>>> catMaybes [Just 1, Nothing, Just 3]\n[1,3]\n\n\nWhen constructing a list of Maybe values, catMaybes can\nbe used to return all of the \"success\" results (if the list is the\nresult of a map, then mapMaybe would be more\nappropriate):\n\n\n>>> import Text.Read ( readMaybe )\n\n>>> [readMaybe x :: Maybe Int | x <- [\"1\", \"Foo\", \"3\"] ]\n[Just 1,Nothing,Just 3]\n\n>>> catMaybes $ [readMaybe x :: Maybe Int | x <- [\"1\", \"Foo\", \"3\"] ]\n[1,3]\n\n"},{"functionSig":"a -> Maybe a -> a","functionName":"fromMaybe","functionDesc":"The fromMaybe function takes a default value and and\nMaybe value. If the Maybe is Nothing, it returns\nthe default values; otherwise, it returns the value contained in the\nMaybe.\n\nExamples\n\nBasic usage:\n\n\n>>> fromMaybe \"\" (Just \"Hello, World!\")\n\"Hello, World!\"\n\n\n\n>>> fromMaybe \"\" Nothing\n\"\"\n\n\nRead an integer from a string using readMaybe. If we fail to\nparse an integer, we want to return 0 by default:\n\n\n>>> import Text.Read ( readMaybe )\n\n>>> fromMaybe 0 (readMaybe \"5\")\n5\n\n>>> fromMaybe 0 (readMaybe \"\")\n0\n\n"},{"functionSig":"[a] -> Maybe a","functionName":"listToMaybe","functionDesc":"The listToMaybe function returns Nothing on an empty\nlist or Just a where a is the first element\nof the list.\n\nExamples\n\nBasic usage:\n\n\n>>> listToMaybe []\nNothing\n\n\n\n>>> listToMaybe [9]\nJust 9\n\n\n\n>>> listToMaybe [1,2,3]\nJust 1\n\n\nComposing maybeToList with listToMaybe should be the\nidentity on singleton/empty lists:\n\n\n>>> maybeToList $ listToMaybe [5]\n[5]\n\n>>> maybeToList $ listToMaybe []\n[]\n\n\nBut not on lists with more than one element:\n\n\n>>> maybeToList $ listToMaybe [1,2,3]\n[1]\n\n"},{"functionSig":"a","functionName":"arg0","functionDesc":""},{"functionSig":"[Maybe (a)]","functionName":"arg1","functionDesc":""}],"outError":""}

-----------------
--- BACKTRACE ---
-----------------
(?? :: a)
((?? :: (alpha0 -> a)) (?? :: alpha0))
(((?? :: (alpha1 -> (alpha0 -> a))) (?? :: alpha1)) (?? :: alpha0))
((Data.Maybe.fromMaybe (?? :: alpha1)) (?? :: alpha0))
(Data.Maybe.fromMaybe arg0 (?? :: alpha0))
(Data.Maybe.fromMaybe arg0 ((?? :: (alpha2 -> Maybe (a))) (?? :: alpha2)))
(Data.Maybe.fromMaybe arg0 (Data.Maybe.listToMaybe (?? :: alpha2)))
(Data.Maybe.fromMaybe arg0 (Data.Maybe.listToMaybe ((?? :: (alpha3 -> [a])) (?? :: alpha3))))
(Data.Maybe.fromMaybe arg0 (Data.Maybe.listToMaybe (Data.Maybe.catMaybes (?? :: alpha3))))
Data.Maybe.fromMaybe arg0 (Data.Maybe.listToMaybe (Data.Maybe.catMaybes arg1))
-----------------

(Quota 8) Done with <a> . (a -> ([Maybe (a)] -> a))!
size +  subSize solution
5       3       Data.Maybe.fromMaybe arg0 (Data.Maybe.listToMaybe (Data.Maybe.catMaybes arg1))

sub = {
        alpha0 ==> Maybe (a) (size 2)
        alpha1 ==> a (size 1)
        alpha2 ==> [a] (size 2)
        alpha3 ==> [Maybe (a)] (size 3)
        tauData.Maybe.catMaybes0 ==> a (size 1)
        tauData.Maybe.fromMaybe0 ==> a (size 1)
        tauData.Maybe.listToMaybe0 ==> a (size 1)
      } (size 3)

(9.86 secs, 933,895,632 bytes)