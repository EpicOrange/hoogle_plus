@package base
@version 4.12.0.0

-- base
module Data.Word
data Word
data {-# CTYPE "HsWord8" #-} Word8

-- base
module Data.Int
data {-# CTYPE "HsInt64" #-} Int64

-- base
module Data.String
type String = [Char]

-- base
module Data.Maybe
data Maybe a
Nothing :: Maybe a
Just :: a -> Maybe a
-- HOF: maybe :: b -> (a -> b) -> Maybe a -> b
isJust :: Maybe a -> Bool
isNothing :: Maybe a -> Bool
fromMaybe :: a -> Maybe a -> a
listToMaybe :: [a] -> Maybe a
maybeToList :: Maybe a -> [a]
catMaybes :: [Maybe a] -> [a]
mapMaybe :: (a -> Maybe b) -> [a] -> [b]

-- bytestring
module Data.ByteString.Builder
data Builder
toLazyByteString :: Builder -> ByteString
int64BE :: Int64 -> Builder

-- bytestring
module Data.ByteString.Lazy
data ByteString

-- base
module GHC.List
and :: [Bool] -> Bool

-- base
module Data.Tuple
fst :: (a, b) -> a
snd :: (a, b) -> b

-- base
module Data.Set
data Set a
member :: a -> Set a -> Bool

-- base
module Data.Map
data Map k v
fromSet :: (k -> a) -> Set k -> Map k a
partitionWithKey :: (k -> a -> Bool) -> Map k a -> (Map k a, Map k a)
