Name	Query	Time	Solution
appBoth	(a -> b) -> (a -> c) -> a -> (b, c)	5.25	\arg0 arg1 arg2 -> ((arg0 arg2) , (arg1 arg2))
test	Bool -> a -> Maybe a	151.53	\arg0 arg1 -> Data.Maybe.listToMaybe (GHC.List.takeWhile (\arg2 -> arg0) (GHC.List.repeat arg1))
both	(a -> b) -> (a, a) -> (b, b)	299.77	-
firstJust	a -> [Maybe a] -> a	61.86	\arg0 arg1 -> GHC.List.last (arg0 : (Data.Maybe.catMaybes arg1))
mapEither	(a -> Either b c) -> [a] -> ([b], [c])	84.80	\arg0 arg1 -> Data.Either.partitionEithers (GHC.List.map arg0 arg1)
mapMaybes	(a -> Maybe b) -> [a] -> Maybe b	5.41	\arg0 arg1 -> arg0 (GHC.List.head (GHC.List.tail arg1))
mergeEither	Either a (Either a b) -> Either a b	299.77	-
mbToEither	Maybe a -> b -> Either a b	299.78	-
cartProduct	[a] -> [b] -> [[(a,b)]]	299.75	-
multiAppPair	(a -> b, a -> c) -> a -> (b, c)	299.81	-
map	(a->b)->[a]->[b]	15.92	\arg0 arg1 -> GHC.List.map arg0 arg1
repl-funcs	(a->b)->Int->[a->b]	9.00	\arg0 arg1 -> GHC.List.replicate arg1 arg0
mbAppFirst	b -> (a -> b) -> [a] -> b	299.98	-
2partApp	(a->b)->(b->c)->[a]->[c]	299.90	-
resolveEither	Either a b -> (a->b) -> b	299.75	-
dedupe	Eq a => [a] -> [a]	299.89	-
inverseMap	[a -> b] -> a -> [b]	299.92	-
multiApp	(a -> b -> c) -> (a -> b) -> a -> c	16.65	\arg0 arg1 arg2 -> arg0 arg2 (arg1 arg2)
singleList	a -> [a]	8.62	\arg0 -> Data.Maybe.maybeToList (Data.Maybe.Just arg0)
head-last	[a] -> (a,a)	299.84	-
head-rest	[a] -> (a, [a])	23.57	\arg0 -> Data.Maybe.fromJust (GHC.List.uncons arg0)
pred-match	[a] -> (a -> Bool) -> Int	31.98	\arg0 arg1 -> GHC.List.length (GHC.List.filter arg1 arg0)
splitStr	String -> Char -> [String]	13.54	\arg0 arg1 -> GHC.List.repeat (Text.Show.showChar arg1 arg0)
splitAtFirst	a -> [a] -> ([a], [a])	299.95	-
hoogle01	(a -> b) -> [a] -> b	14.97	\arg0 arg1 -> arg0 (GHC.List.head arg1)
firstMatch	[a] -> (a -> Bool) -> a	28.55	\arg0 arg1 -> GHC.List.head (GHC.List.filter arg1 arg0)
firstMaybe	[Maybe a] -> a	7.41	\arg0 -> GHC.List.head (Data.Maybe.catMaybes arg0)
rights	[Either a b] -> Either a [b]	37.91	\arg0 -> Data.Either.Right (Data.Either.rights arg0)
firstKey	[(a,b)] -> a	167.42	\arg0 -> Data.Tuple.fst (GHC.List.head arg0)
firstRight	[Either a b] -> Either a b	299.87	-
maybe	Maybe a -> a -> Maybe a	13.29	\arg0 arg1 -> Data.Maybe.Just (Data.Maybe.fromMaybe arg1 arg0)
app3	(a -> b -> c -> d) -> a -> c -> b -> d	11.30	\arg0 arg1 arg2 arg3 -> arg0 arg1 arg3 arg2
appendN	Int -> [a] -> [a]	128.12	\arg0 arg1 -> GHC.List.concat (GHC.List.replicate arg0 arg1)
zipWithResult	(a->b)->[a]->[(a,b)]	94.21	\arg0 arg1 -> GHC.List.zip arg1 (GHC.List.map arg0 arg1)
applyNtimes	(a->a) -> a -> Int -> a	36.75	\arg0 arg1 arg2 -> (GHC.List.iterate arg0 arg1) !! arg2
eitherTriple	Either a b -> Either a b -> Either a b	299.79	-
pipe	[(a -> a)] -> (a -> a)	166.87	\arg0 arg1 -> GHC.List.foldr (\arg2 -> arg2) arg1 arg0
lookup	Eq a => [(a,b)] -> a -> b	31.11	\arg0 arg1 -> Data.Maybe.fromJust (GHC.List.lookup arg1 arg0)
mbElem	Eq a => a -> [a] -> Maybe a	299.77	-
areEq	Eq a => a -> a -> Maybe a	299.76	-
applyPair	(a -> b, a) -> b	85.48	\arg0 -> Data.Tuple.uncurry (\arg1 -> arg1) arg0
flatten	[[[a]]] -> [a]	4.36	\arg0 -> GHC.List.concat (GHC.List.concat arg0)
takeNdropM	Int -> Int -> [a] -> ([a], [a])	299.80	-
indexesOf	([(a,Int)] -> [(a,Int)]) -> [a] -> [Int] -> [Int]	299.78	-
containsEdge	[Int] -> (Int,Int) -> Bool	299.78	-
