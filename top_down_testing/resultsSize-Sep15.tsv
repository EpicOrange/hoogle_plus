Name	Query	Time	Solution
appBoth	(a -> b) -> (a -> c) -> a -> (b, c)	299.74	-
test	Bool -> a -> Maybe a	299.79	-
both	(a -> b) -> (a, a) -> (b, b)	299.75	-
firstJust	a -> [Maybe a] -> a	12.84	\arg0 arg1 -> GHC.List.foldl Data.Maybe.fromMaybe arg0 arg1
mapEither	(a -> Either b c) -> [a] -> ([b], [c])	3.76	\arg0 arg1 -> Data.Either.partitionEithers (GHC.List.map arg0 arg1)
mapMaybes	(a -> Maybe b) -> [a] -> Maybe b	5.13	\arg0 arg1 -> arg0 (GHC.List.head (GHC.List.tail arg1))
mergeEither	Either a (Either a b) -> Either a b	300.07	-
mbToEither	Maybe a -> b -> Either a b	299.74	-
cartProduct	[a] -> [b] -> [[(a,b)]]	262.06	-
multiAppPair	(a -> b, a -> c) -> a -> (b, c)	299.90	-
map	(a->b)->[a]->[b]	19.82	\arg0 arg1 -> GHC.List.map arg0 arg1
repl-funcs	(a->b)->Int->[a->b]	6.80	\arg0 arg1 -> GHC.List.cycle (GHC.List.replicate arg1 arg0)
mbAppFirst	b -> (a -> b) -> [a] -> b	299.80	-
2partApp	(a->b)->(b->c)->[a]->[c]	301.29	-
resolveEither	Either a b -> (a->b) -> b	300.60	-
dedupe	Eq a => [a] -> [a]	301.04	-
inverseMap	[a -> b] -> a -> [b]	302.70	-
multiApp	(a -> b -> c) -> (a -> b) -> a -> c	14.47	\arg0 arg1 arg2 -> arg0 arg2 (arg1 arg2)
singleList	a -> [a]	15.45	\arg0 -> Data.Maybe.maybeToList (Data.Maybe.Just arg0)
head-last	[a] -> (a,a)	54.01	\arg0 -> Data.Maybe.fromJust (Data.Maybe.listToMaybe (GHC.List.zip arg0 (GHC.List.reverse arg0)))
head-rest	[a] -> (a, [a])	1.68	\arg0 -> Data.Maybe.fromJust (GHC.List.uncons arg0)
pred-match	[a] -> (a -> Bool) -> Int	10.13	\arg0 arg1 -> GHC.List.length (GHC.List.filter arg1 arg0)
splitStr	String -> Char -> [String]	7.91	\arg0 arg1 -> GHC.List.repeat (arg1 : arg0)
splitAtFirst	a -> [a] -> ([a], [a])	299.78	-
hoogle01	(a -> b) -> [a] -> b	5.66	\arg0 arg1 -> arg0 (Data.Maybe.fromJust (Data.Maybe.listToMaybe arg1))
firstMatch	[a] -> (a -> Bool) -> a	10.46	\arg0 arg1 -> GHC.List.head (GHC.List.filter arg1 arg0)
firstMaybe	[Maybe a] -> a	2.98	\arg0 -> Data.Maybe.fromJust (Data.Maybe.listToMaybe (Data.Maybe.catMaybes arg0))
rights	[Either a b] -> Either a [b]	2.64	\arg0 -> Data.Either.Right (Data.Either.rights arg0)
firstKey	[(a,b)] -> a	1.66	\arg0 -> Data.Tuple.fst (Data.Maybe.fromJust (Data.Maybe.listToMaybe arg0))
firstRight	[Either a b] -> Either a b	6.51	\arg0 -> Data.Either.Right (GHC.List.head (Data.Either.rights arg0))
maybe	Maybe a -> a -> Maybe a	3.58	\arg0 arg1 -> Data.Maybe.Just (Data.Maybe.fromMaybe arg1 arg0)
app3	(a -> b -> c -> d) -> a -> c -> b -> d	5.06	\arg0 arg1 arg2 arg3 -> arg0 arg1 arg3 arg2
appendN	Int -> [a] -> [a]	9.91	\arg0 arg1 -> GHC.List.concat (GHC.List.replicate arg0 arg1)
zipWithResult	(a->b)->[a]->[(a,b)]	301.64	-
applyNtimes	(a->a) -> a -> Int -> a	299.77	-
eitherTriple	Either a b -> Either a b -> Either a b	299.75	-
pipe	[(a -> a)] -> (a -> a)	299.69	-
lookup	Eq a => [(a,b)] -> a -> b	149.46	\arg0 arg1 -> Data.Maybe.fromJust (GHC.List.lookup arg1 arg0)
mbElem	Eq a => a -> [a] -> Maybe a	299.78	-
areEq	Eq a => a -> a -> Maybe a	299.79	-
applyPair	(a -> b, a) -> b	8.88	\arg0 -> Data.Tuple.fst arg0 (Data.Tuple.snd arg0)
flatten	[[[a]]] -> [a]	10.99	\arg0 -> GHC.List.concat (GHC.List.concat arg0)
indexesOf	([(a,Int)] -> [(a,Int)]) -> [a] -> [Int] -> [Int]	301.95	-
