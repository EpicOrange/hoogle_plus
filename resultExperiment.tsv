Name	Query	Time	dfsCounter	Solution
appBoth	(a -> b) -> (a -> c) -> a -> (b, c)	2.37	15653	\arg0 arg1 arg2 -> ((arg0 arg2) , (arg1 arg2))
test	Bool -> a -> Maybe a	127.25	12541	\arg0 arg1 -> Data.Bool.bool Data.Maybe.Nothing (Data.Maybe.Just arg1) arg0
both	(a -> b) -> (a, a) -> (b, b)	300.07	-	-
firstJust	a -> [Maybe a] -> a	2.56	1053	\arg0 arg1 -> GHC.List.foldl Data.Maybe.fromMaybe arg0 arg1
mapEither	(a -> Either b c) -> [a] -> ([b], [c])	2.70	1297	\arg0 arg1 -> Data.Either.partitionEithers (GHC.List.map arg0 arg1)
mapMaybes	(a -> Maybe b) -> [a] -> Maybe b	3.08	1411	\arg0 arg1 -> arg0 (GHC.List.head (GHC.List.tail arg1))
mergeEither	Either a (Either a b) -> Either a b	300.08	-	-
mbToEither	Maybe a -> b -> Either a b	87.81	11160	\arg0 arg1 -> Data.Maybe.maybe (Data.Either.Right arg1) Data.Either.Left arg0
cartProduct	[a] -> [b] -> [[(a,b)]]	300.07	-	-
multiAppPair	(a -> b, a -> c) -> a -> (b, c)	300.61	-	-
map	(a->b)->[a]->[b]	2.10	164	\arg0 arg1 -> GHC.List.map arg0 arg1
repl-funcs	(a->b)->Int->[a->b]	1.47	126	\arg0 arg1 -> GHC.List.replicate arg1 arg0
mbAppFirst	b -> (a -> b) -> [a] -> b	103.11	29872	\arg0 arg1 arg2 -> Data.Maybe.maybe arg0 arg1 (Data.Maybe.listToMaybe arg2)
2partApp	(a->b)->(b->c)->[a]->[c]	300.12	-	-
resolveEither	Either a b -> (a->b) -> b	300.08	-	-
dedupe	Eq a => [a] -> [a]	146.50	-	-
inverseMap	[a -> b] -> a -> [b]	300.08	-	-
multiApp	(a -> b -> c) -> (a -> b) -> a -> c	2.14	1167	\arg0 arg1 arg2 -> arg0 arg2 (arg1 arg2)
singleList	a -> [a]	1.18	66	\arg0 -> arg0 : []
head-last	[a] -> (a,a)	56.80	1727	\arg0 -> ((GHC.List.head arg0) , (GHC.List.last arg0))
head-rest	[a] -> (a, [a])	0.72	54	\arg0 -> Data.Maybe.fromJust (GHC.List.uncons arg0)
pred-match	[a] -> (a -> Bool) -> Int	3.17	1962	\arg0 arg1 -> GHC.List.length (GHC.List.filter arg1 arg0)
splitStr	String -> Char -> [String]	1.76	4241	\arg0 arg1 -> GHC.List.repeat (arg1 : arg0)
splitAtFirst	a -> [a] -> ([a], [a])	300.12	-	-
hoogle01	(a -> b) -> [a] -> b	1.45	133	\arg0 arg1 -> arg0 (GHC.List.head arg1)
firstMatch	[a] -> (a -> Bool) -> a	3.03	1638	\arg0 arg1 -> GHC.List.head (GHC.List.filter arg1 arg0)
firstMaybe	[Maybe a] -> a	1.12	77	\arg0 -> GHC.List.head (Data.Maybe.catMaybes arg0)
rights	[Either a b] -> Either a [b]	0.69	59	\arg0 -> Data.Either.Right (Data.Either.rights arg0)
firstKey	[(a,b)] -> a	300.08	-	-
firstRight	[Either a b] -> Either a b	3.55	118	\arg0 -> GHC.List.last (GHC.List.init arg0)
maybe	Maybe a -> a -> Maybe a	2.09	1273	\arg0 arg1 -> Data.Maybe.Just (Data.Maybe.fromMaybe arg1 arg0)
app3	(a -> b -> c -> d) -> a -> c -> b -> d	1.08	1925	\arg0 arg1 arg2 arg3 -> arg0 arg1 arg3 arg2
appendN	Int -> [a] -> [a]	5.77	3671	\arg0 arg1 -> GHC.List.concat (GHC.List.replicate arg0 arg1)
zipWithResult	(a->b)->[a]->[(a,b)]	3.99	13934	\arg0 arg1 -> GHC.List.zip arg1 (GHC.List.map arg0 arg1)
applyNtimes	(a->a) -> a -> Int -> a	6.73	25548	\arg0 arg1 arg2 -> (GHC.List.iterate arg0 arg1) !! arg2
eitherTriple	Either a b -> Either a b -> Either a b	7.98	11789	\arg0 arg1 -> Data.Bool.bool arg1 arg0 (Data.Either.isLeft arg0)
pipe	[(a -> a)] -> (a -> a)	300.11	-	-
lookup	Eq a => [(a,b)] -> a -> b	300.07	-	-
mbElem	Eq a => a -> [a] -> Maybe a	300.07	-	-
areEq	Eq a => a -> a -> Maybe a	300.07	-	-
applyPair	(a -> b, a) -> b	31.73	178	\arg0 -> Data.Tuple.fst arg0 (Data.Tuple.snd arg0)
flatten	[[[a]]] -> [a]	0.72	166	\arg0 -> GHC.List.concat (GHC.List.concat arg0)
takeNdropM	Int -> Int -> [a] -> ([a], [a])	300.12	-	-
indexesOf	([(a,Int)] -> [(a,Int)]) -> [a] -> [Int] -> [Int]	300.09	-	-
containsEdge	[Int] -> (Int,Int) -> Bool	300.05	-	-
numElem	Eq a => [a] -> a -> Int	300.05	-	-
intersect	Eq a => [a] -> [a] -> [a]	176.88	-	-
