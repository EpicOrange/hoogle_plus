[data Char where,data Double where,type String = ([((Char))]),type FilePath = (String),data Float where,data Handle where,data IO a where,data Integer where,data ShortByteString where,data Word where,data Word16 where,data Word32 where,data Word64 where,data Word8 where]
[data Char where,data Double where,type String = ([((Char))]),type FilePath = (String),data Float where,data Handle where,data IO a where,data Integer where,data ShortByteString where,data Word where,data Word16 where,data Word32 where,data Word64 where,data Word8 where]
["void","ByteString","Int64","_v"]
*******************SOLUTION*********************
SOLUTION: Data.ByteString.Builder.toLazyByteString (Data.ByteString.Builder.int64HexFixed arg0)
************************************************
["void","Bool","Builder","ByteString","Char","Double","Either _v1 _v2","Float","Handle","IO _v1","Int","Int16","Int32","Int64","Int8","Integer","List _v1","Maybe _v1","Pair _v1 _v2","ShortByteString","Unit","Word","Word16","Word32","Word64","Word8","_v"]
*******************SOLUTION*********************
SOLUTION: Data.ByteString.Builder.toLazyByteString (Data.ByteString.Builder.int64Dec arg0)
************************************************
["void","_v"]
*******************SOLUTION*********************
SOLUTION: Data.ByteString.Builder.toLazyByteString (Data.ByteString.Builder.int64Dec arg0)
************************************************
["void","ByteString","Int64","_v"]
*******************SOLUTION*********************
SOLUTION: Data.ByteString.Builder.toLazyByteString (Data.ByteString.Builder.int64HexFixed arg0)
************************************************
["void","_v"]
*******************SOLUTION*********************
SOLUTION: Data.ByteString.Lazy.drop arg0 Data.ByteString.Lazy.empty
************************************************
["void","ByteString","Int64","_v"]
*******************SOLUTION*********************
SOLUTION: Data.ByteString.Builder.toLazyByteString (Data.ByteString.Builder.int64Dec arg0)
************************************************
["void","Bool","List Maybe Bool","_v"]
*******************SOLUTION*********************
SOLUTION: GHC.List.null arg0
************************************************
["void","Bool","Builder","ByteString","Char","Double","Either _v1 _v2","Float","Handle","IO _v1","Int","Int16","Int32","Int64","Int8","Integer","List _v1","Maybe _v1","Pair _v1 _v2","ShortByteString","Unit","Word","Word16","Word32","Word64","Word8","_v"]
*******************SOLUTION*********************
SOLUTION: GHC.List.null arg0
************************************************
["void","_v"]
*******************SOLUTION*********************
SOLUTION: GHC.List.null arg0
************************************************
["void","Bool","List Maybe Bool","_v"]
*******************SOLUTION*********************
SOLUTION: GHC.List.null arg0
************************************************
["void","_v"]
*******************SOLUTION*********************
SOLUTION: GHC.List.null arg0
************************************************
["void","Bool","List Maybe Bool","_v"]
*******************SOLUTION*********************
SOLUTION: GHC.List.null arg0
************************************************
["void","List Maybe a","_v","a"]
*******************SOLUTION*********************
SOLUTION: Data.Bool.bool arg1 arg1 (GHC.List.null arg0)
************************************************
["void","Bool","Builder","ByteString","Char","Double","Either _v1 _v2","Float","Handle","IO _v1","Int","Int16","Int32","Int64","Int8","Integer","List _v1","Maybe _v1","Pair _v1 _v2","ShortByteString","Unit","Word","Word16","Word32","Word64","Word8","_v","a"]
*******************SOLUTION*********************
SOLUTION: Data.Bool.bool arg1 arg1 (GHC.List.null arg0)
************************************************
["void","_v"]
<<timeout>>
["void","List Maybe a","_v","a"]
*******************SOLUTION*********************
SOLUTION: Data.Bool.bool arg1 arg1 (GHC.List.null arg0)
************************************************
["void","_v"]
*******************SOLUTION*********************
SOLUTION: Data.Bool.bool arg1 arg1 (GHC.List.null arg0)
************************************************
["void","List Maybe a","_v","a"]
*******************SOLUTION*********************
SOLUTION: Data.Bool.bool arg1 arg1 (GHC.List.null arg0)
************************************************
["void","Pair a a","Pair b b","_v","a","b"]
<<timeout>>
["void","Bool","Builder","ByteString","Char","Double","Either _v1 _v2","Float","Handle","IO _v1","Int","Int16","Int32","Int64","Int8","Integer","List _v1","Maybe _v1","Pair _v1 _v2","ShortByteString","Unit","Word","Word16","Word32","Word64","Word8","_v","a","b"]
<<timeout>>
["void","_v"]
<<timeout>>
["void","Pair a a","Pair b b","_v","a","b"]
<<timeout>>
["void","_v"]
<<timeout>>
["void","Pair a a","Pair b b","_v","a","b"]
*******************SOLUTION*********************
SOLUTION: (,) (arg0 (fst arg1)) (arg0 (snd arg1))
************************************************
["void","Pair Pair a c b","_v","a","b","c","d"]
*******************SOLUTION*********************
SOLUTION: arg1 (fst (fst arg0)) (snd arg0) (snd (fst arg0))
************************************************
["void","Bool","Builder","ByteString","Char","Double","Either _v1 _v2","Float","Handle","IO _v1","Int","Int16","Int32","Int64","Int8","Integer","List _v1","Maybe _v1","Pair _v1 _v2","ShortByteString","Unit","Word","Word16","Word32","Word64","Word8","_v","a","b","c","d"]
*******************SOLUTION*********************
SOLUTION: arg1 (fst (fst arg0)) (snd arg0) (snd (fst arg0))
************************************************
["void","_v"]
*******************SOLUTION*********************
SOLUTION: arg1 (fst (fst arg0)) (snd arg0) (snd (fst arg0))
************************************************
["void","Pair Pair a c b","_v","a","b","c","d"]
*******************SOLUTION*********************
SOLUTION: arg1 (fst (fst arg0)) (snd arg0) (snd (fst arg0))
************************************************
["void","_v"]
*******************SOLUTION*********************
SOLUTION: arg1 (fst (fst arg0)) (snd arg0) (snd (fst arg0))
************************************************
["void","Pair Pair a c b","_v","a","b","c","d"]
*******************SOLUTION*********************
SOLUTION: arg1 (fst (fst arg0)) (snd arg0) (snd (fst arg0))
************************************************
["void","Maybe a","_v","a"]
*******************SOLUTION*********************
SOLUTION: Data.Maybe.Just (Data.Maybe.fromMaybe arg0 arg1)
************************************************
["void","Bool","Builder","ByteString","Char","Double","Either _v1 _v2","Float","Handle","IO _v1","Int","Int16","Int32","Int64","Int8","Integer","List _v1","Maybe _v1","Pair _v1 _v2","ShortByteString","Unit","Word","Word16","Word32","Word64","Word8","_v","a"]
*******************SOLUTION*********************
SOLUTION: Data.Maybe.Just (Data.Maybe.fromMaybe arg0 arg1)
************************************************
["void","_v"]
*******************SOLUTION*********************
SOLUTION: Data.Maybe.Just (Data.Maybe.fromMaybe arg0 arg1)
************************************************
["void","Maybe a","_v","a"]
*******************SOLUTION*********************
SOLUTION: Data.Maybe.Just (Data.Maybe.fromMaybe arg0 arg1)
************************************************
["void","_v"]
*******************SOLUTION*********************
SOLUTION: Data.Maybe.Just (Data.Maybe.fromMaybe arg0 arg1)
************************************************
["void","Maybe a","_v","a"]
*******************SOLUTION*********************
SOLUTION: Data.Maybe.Just (Data.Maybe.fromMaybe arg0 arg1)
************************************************
["void","Int","List a","_v"]
*******************SOLUTION*********************
SOLUTION: GHC.List.length ((GHC.List.++) arg0 arg1)
************************************************
["void","Bool","Builder","ByteString","Char","Double","Either _v1 _v2","Float","Handle","IO _v1","Int","Int16","Int32","Int64","Int8","Integer","List _v1","Maybe _v1","Pair _v1 _v2","ShortByteString","Unit","Word","Word16","Word32","Word64","Word8","_v","a"]
*******************SOLUTION*********************
SOLUTION: GHC.List.length (GHC.List.zip arg0 arg1)
************************************************
["void","_v"]
*******************SOLUTION*********************
SOLUTION: GHC.List.length ((GHC.List.++) arg0 arg1)
************************************************
["void","Int","List a","_v"]
*******************SOLUTION*********************
SOLUTION: GHC.List.length ((GHC.List.++) arg0 arg1)
************************************************
["void","_v"]
*******************SOLUTION*********************
SOLUTION: GHC.List.length ((GHC.List.++) arg0 arg1)
************************************************
["void","Int","List a","_v"]
*******************SOLUTION*********************
SOLUTION: GHC.List.length ((GHC.List.++) arg0 arg1)
************************************************
["void","Int","List Int","_v"]
*******************SOLUTION*********************
SOLUTION: Data.Maybe.maybeToList (Data.Maybe.Just arg0)
************************************************
["void","Bool","Builder","ByteString","Char","Double","Either _v1 _v2","Float","Handle","IO _v1","Int","Int16","Int32","Int64","Int8","Integer","List _v1","Maybe _v1","Pair _v1 _v2","ShortByteString","Unit","Word","Word16","Word32","Word64","Word8","_v"]
*******************SOLUTION*********************
SOLUTION: GHC.List.take arg0 []
************************************************
["void","_v"]
*******************SOLUTION*********************
SOLUTION: GHC.List.take arg0 []
************************************************
["void","Int","List Int","_v"]
*******************SOLUTION*********************
SOLUTION: GHC.List.take arg0 []
************************************************
["void","_v"]
*******************SOLUTION*********************
SOLUTION: Data.Maybe.maybeToList (Data.Maybe.Just arg0)
************************************************
["void","Int","List Int","_v"]
*******************SOLUTION*********************
SOLUTION: GHC.List.replicate arg0 arg0
************************************************
["void","_v","a","b","c"]
*******************SOLUTION*********************
SOLUTION: arg2 arg0 (arg1 arg0)
************************************************
["void","Bool","Builder","ByteString","Char","Double","Either _v1 _v2","Float","Handle","IO _v1","Int","Int16","Int32","Int64","Int8","Integer","List _v1","Maybe _v1","Pair _v1 _v2","ShortByteString","Unit","Word","Word16","Word32","Word64","Word8","_v","a","b","c"]
*******************SOLUTION*********************
SOLUTION: arg2 arg0 (arg1 arg0)
************************************************
["void","_v"]
*******************SOLUTION*********************
SOLUTION: arg2 arg0 (arg1 arg0)
************************************************
["void","_v","a","b","c"]
*******************SOLUTION*********************
SOLUTION: arg2 arg0 (arg1 arg0)
************************************************
["void","_v"]
*******************SOLUTION*********************
SOLUTION: arg2 arg0 (arg1 arg0)
************************************************
["void","_v","a","b","c"]
*******************SOLUTION*********************
SOLUTION: arg2 arg0 (arg1 arg0)
************************************************
["void","List a","Pair List a List a","_v","a"]
<<timeout>>
["void","Bool","Builder","ByteString","Char","Double","Either _v1 _v2","Float","Handle","IO _v1","Int","Int16","Int32","Int64","Int8","Integer","List _v1","Maybe _v1","Pair _v1 _v2","ShortByteString","Unit","Word","Word16","Word32","Word64","Word8","_v","a"]
<<timeout>>
["void","_v"]
<<timeout>>
["void","List a","Pair List a List a","_v","a"]
*******************SOLUTION*********************
SOLUTION: (,) ((:) arg1 arg0) arg0
************************************************
["void","_v"]
*******************SOLUTION*********************
SOLUTION: (,) ((:) arg1 arg0) arg0
************************************************
["void","List a","Pair List a List a","_v","a"]
*******************SOLUTION*********************
SOLUTION: (,) ((:) arg1 arg0) arg0
************************************************
["void","_v","t","t1","t2"]
*******************SOLUTION*********************
SOLUTION: arg2 (arg1 arg0) arg0
************************************************
["void","Bool","Builder","ByteString","Char","Double","Either _v1 _v2","Float","Handle","IO _v1","Int","Int16","Int32","Int64","Int8","Integer","List _v1","Maybe _v1","Pair _v1 _v2","ShortByteString","Unit","Word","Word16","Word32","Word64","Word8","_v","t","t1","t2"]
*******************SOLUTION*********************
SOLUTION: arg2 (arg1 arg0) arg0
************************************************
["void","_v"]
*******************SOLUTION*********************
SOLUTION: arg2 (arg1 arg0) arg0
************************************************
["void","_v","t","t1","t2"]
*******************SOLUTION*********************
SOLUTION: arg2 (arg1 arg0) arg0
************************************************
["void","_v"]
*******************SOLUTION*********************
SOLUTION: arg2 (arg1 arg0) arg0
************************************************
["void","_v","t","t1","t2"]
*******************SOLUTION*********************
SOLUTION: arg2 (arg1 arg0) arg0
************************************************
["void","Char","List Char","List List Char","_v"]
*******************SOLUTION*********************
SOLUTION: (:) ((:) arg0 arg1) []
************************************************
["void","Bool","Builder","ByteString","Char","Double","Either _v1 _v2","Float","Handle","IO _v1","Int","Int16","Int32","Int64","Int8","Integer","List _v1","Maybe _v1","Pair _v1 _v2","ShortByteString","Unit","Word","Word16","Word32","Word64","Word8","_v"]
*******************SOLUTION*********************
SOLUTION: GHC.List.replicate (GHC.List.length arg1) (Text.Show.show arg0)
************************************************
["void","_v"]
*******************SOLUTION*********************
SOLUTION: Data.Maybe.maybeToList (Data.Maybe.Just (Text.Show.showChar arg0 arg1))
************************************************
["void","Char","List Char","List List Char","_v"]
*******************SOLUTION*********************
SOLUTION: Data.Maybe.maybeToList (Data.Maybe.Just (Text.Show.shows arg0 arg1))
************************************************
["void","_v"]
<<timeout>>
["void","Char","List Char","List List Char","_v"]
*******************SOLUTION*********************
SOLUTION: GHC.List.replicate (GHC.List.length arg1) (Text.Show.show arg0)
************************************************
["void","List a","Maybe a","_v","a"]
*******************SOLUTION*********************
SOLUTION: Data.Maybe.listToMaybe ((:) arg1 arg0)
************************************************
["void","Bool","Builder","ByteString","Char","Double","Either _v1 _v2","Float","Handle","IO _v1","Int","Int16","Int32","Int64","Int8","Integer","List _v1","Maybe _v1","Pair _v1 _v2","ShortByteString","Unit","Word","Word16","Word32","Word64","Word8","_v","a"]
*******************SOLUTION*********************
SOLUTION: Data.Maybe.listToMaybe ((:) arg1 arg0)
************************************************
["void","_v"]
*******************SOLUTION*********************
SOLUTION: Data.Maybe.listToMaybe ((:) arg1 arg0)
************************************************
["void","List a","Maybe a","_v","a"]
*******************SOLUTION*********************
SOLUTION: Data.Maybe.listToMaybe ((:) arg1 arg0)
************************************************
["void","_v"]
*******************SOLUTION*********************
SOLUTION: Data.Maybe.listToMaybe ((:) arg1 arg0)
************************************************
["void","List a","Maybe a","_v","a"]
*******************SOLUTION*********************
SOLUTION: Data.Maybe.listToMaybe ((:) arg1 arg0)
************************************************
["void","Int","List a","_v","a"]
*******************SOLUTION*********************
SOLUTION: GHC.List.length ((:) arg0 arg1)
************************************************
["void","Bool","Builder","ByteString","Char","Double","Either _v1 _v2","Float","Handle","IO _v1","Int","Int16","Int32","Int64","Int8","Integer","List _v1","Maybe _v1","Pair _v1 _v2","ShortByteString","Unit","Word","Word16","Word32","Word64","Word8","_v","a"]
*******************SOLUTION*********************
SOLUTION: GHC.List.length ((:) arg0 arg1)
************************************************
["void","_v"]
*******************SOLUTION*********************
SOLUTION: GHC.List.length ((:) arg0 arg1)
************************************************
["void","Int","List a","_v","a"]
*******************SOLUTION*********************
SOLUTION: GHC.List.length ((:) arg0 arg1)
************************************************
["void","_v"]
*******************SOLUTION*********************
SOLUTION: GHC.List.length ((:) arg0 arg1)
************************************************
["void","Int","List a","_v","a"]
*******************SOLUTION*********************
SOLUTION: GHC.List.length ((:) arg0 arg1)
************************************************
["void","Either a b","_v"]
*******************SOLUTION*********************
SOLUTION: Data.Bool.bool arg0 arg1 Data.Bool.True
************************************************
["void","Bool","Builder","ByteString","Char","Double","Either _v1 _v2","Float","Handle","IO _v1","Int","Int16","Int32","Int64","Int8","Integer","List _v1","Maybe _v1","Pair _v1 _v2","ShortByteString","Unit","Word","Word16","Word32","Word64","Word8","_v","a","b"]
*******************SOLUTION*********************
SOLUTION: Data.Maybe.fromMaybe arg0 (Data.Maybe.Just arg1)
************************************************
["void","_v"]
*******************SOLUTION*********************
SOLUTION: Data.Bool.bool arg0 arg1 Data.Bool.otherwise
************************************************
["void","Either a b","_v"]
*******************SOLUTION*********************
SOLUTION: Data.Maybe.fromMaybe arg0 (Data.Maybe.Just arg1)
************************************************
["void","_v"]
*******************SOLUTION*********************
SOLUTION: Data.Bool.bool arg0 arg1 Data.Bool.True
************************************************
["void","Either a b","_v"]
*******************SOLUTION*********************
SOLUTION: Data.Maybe.fromMaybe arg0 (Data.Maybe.Just arg1)
************************************************
["void","Pair a b","_v"]
*******************SOLUTION*********************
SOLUTION: Data.Bool.bool arg0 arg1 Data.Bool.False
************************************************
["void","Bool","Builder","ByteString","Char","Double","Either _v1 _v2","Float","Handle","IO _v1","Int","Int16","Int32","Int64","Int8","Integer","List _v1","Maybe _v1","Pair _v1 _v2","ShortByteString","Unit","Word","Word16","Word32","Word64","Word8","_v","a","b"]
*******************SOLUTION*********************
SOLUTION: Data.Bool.bool arg0 arg1 Data.Bool.otherwise
************************************************
["void","_v"]
*******************SOLUTION*********************
SOLUTION: Data.Maybe.fromMaybe arg0 (Data.Maybe.Just arg1)
************************************************
["void","Pair a b","_v"]
*******************SOLUTION*********************
SOLUTION: Data.Maybe.fromMaybe arg0 (Data.Maybe.Just arg1)
************************************************
["void","_v"]
*******************SOLUTION*********************
SOLUTION: Data.Maybe.fromMaybe arg0 (Data.Maybe.Just arg1)
************************************************
["void","Pair a b","_v"]
*******************SOLUTION*********************
SOLUTION: Data.Bool.bool arg0 arg1 Data.Bool.otherwise
************************************************
["void","Maybe a","_v","a"]
*******************SOLUTION*********************
SOLUTION: Data.Maybe.Just (Data.Bool.bool arg0 arg1 Data.Bool.otherwise)
************************************************
["void","Bool","Builder","ByteString","Char","Double","Either _v1 _v2","Float","Handle","IO _v1","Int","Int16","Int32","Int64","Int8","Integer","List _v1","Maybe _v1","Pair _v1 _v2","ShortByteString","Unit","Word","Word16","Word32","Word64","Word8","_v","a"]
*******************SOLUTION*********************
SOLUTION: Data.Maybe.Just (Data.Bool.bool arg0 arg1 Data.Bool.otherwise)
************************************************
["void","_v"]
*******************SOLUTION*********************
SOLUTION: GHC.List.lookup ((,) arg0 arg1) []
************************************************
["void","Maybe a","_v","a"]
*******************SOLUTION*********************
SOLUTION: GHC.List.lookup ((,) arg0 arg1) []
************************************************
["void","_v"]
*******************SOLUTION*********************
SOLUTION: GHC.List.lookup ((,) arg0 arg1) []
************************************************
["void","Maybe a","_v","a"]
*******************SOLUTION*********************
SOLUTION: Data.Maybe.Just (Data.Maybe.fromMaybe arg0 (Data.Maybe.Just arg1))
************************************************
["void","Either a List b","List Either a b","_v"]
<<timeout>>
["void","Bool","Builder","ByteString","Char","Double","Either _v1 _v2","Float","Handle","IO _v1","Int","Int16","Int32","Int64","Int8","Integer","List _v1","Maybe _v1","Pair _v1 _v2","ShortByteString","Unit","Word","Word16","Word32","Word64","Word8","_v","a","b"]
*******************SOLUTION*********************
SOLUTION: Data.Either.Right (Data.Either.rights arg0)
************************************************
["void","_v"]
<<timeout>>
["void","Either a List b","List Either a b","_v"]
*******************SOLUTION*********************
SOLUTION: Data.Either.Right (Data.Either.rights arg0)
************************************************
["void","_v"]
*******************SOLUTION*********************
SOLUTION: Data.Either.Right (Data.Either.rights arg0)
************************************************
["void","Either a List b","List Either a b","_v"]
*******************SOLUTION*********************
SOLUTION: Data.Either.Right (Data.Either.rights arg0)
************************************************
["void","List Char","List List Char","_v","a"]
*******************SOLUTION*********************
SOLUTION: Text.Show.show ((,) arg1 arg0)
************************************************
["void","Bool","Builder","ByteString","Char","Double","Either _v1 _v2","Float","Handle","IO _v1","Int","Int16","Int32","Int64","Int8","Integer","List _v1","Maybe _v1","Pair _v1 _v2","ShortByteString","Unit","Word","Word16","Word32","Word64","Word8","_v","a"]
*******************SOLUTION*********************
SOLUTION: Text.Show.shows arg1 (Text.Show.show arg0)
************************************************
["void","_v"]
*******************SOLUTION*********************
SOLUTION: Text.Show.show ((,) arg1 arg0)
************************************************
["void","List Char","List List Char","_v","a"]
*******************SOLUTION*********************
SOLUTION: Text.Show.show ((,) arg1 arg0)
************************************************
["void","_v"]
*******************SOLUTION*********************
SOLUTION: Text.Show.show ((,) arg0 arg1)
************************************************
["void","List Char","List List Char","_v","a"]
*******************SOLUTION*********************
SOLUTION: Text.Show.shows arg0 (Text.Show.show arg1)
************************************************
["void","List Pair a b","_v","a","b"]
<<timeout>>
["void","Bool","Builder","ByteString","Char","Double","Either _v1 _v2","Float","Handle","IO _v1","Int","Int16","Int32","Int64","Int8","Integer","List _v1","Maybe _v1","Pair _v1 _v2","ShortByteString","Unit","Word","Word16","Word32","Word64","Word8","_v","a","b"]
<<timeout>>
["void","_v"]
<<timeout>>
["void","List Pair a b","_v","a","b"]
<<timeout>>
["void","_v"]
<<timeout>>
["void","List Pair a b","_v","a","b"]
<<timeout>>
["void","List Pair a b","List a","_v","a","b"]
<<timeout>>
["void","Bool","Builder","ByteString","Char","Double","Either _v1 _v2","Float","Handle","IO _v1","Int","Int16","Int32","Int64","Int8","Integer","List _v1","Maybe _v1","Pair _v1 _v2","ShortByteString","Unit","Word","Word16","Word32","Word64","Word8","_v","a","b"]
<<timeout>>
["void","_v"]
<<timeout>>
["void","List Pair a b","List a","_v","a","b"]
<<timeout>>
["void","_v"]
<<timeout>>
["void","List Pair a b","List a","_v","a","b"]
<<timeout>>
["void","List List Pair a b","List a","List b","_v"]
<<timeout>>
["void","Bool","Builder","ByteString","Char","Double","Either _v1 _v2","Float","Handle","IO _v1","Int","Int16","Int32","Int64","Int8","Integer","List _v1","Maybe _v1","Pair _v1 _v2","ShortByteString","Unit","Word","Word16","Word32","Word64","Word8","_v","a","b"]
<<timeout>>
["void","_v"]
*******************SOLUTION*********************
SOLUTION: (:) (GHC.List.zip arg1 arg0) []
************************************************
["void","List List Pair a b","List a","List b","_v"]
<<timeout>>
["void","_v"]
<<timeout>>
["void","List List Pair a b","List a","List b","_v"]
<<timeout>>
[ResultSummary {envName = "Total", paramName = "Query Refinement", queryName = "intToBytestring", queryStr = "Int64 -> ByteString", result = Result {resSolutionOrError = Right "Just Data.ByteString.Builder.toLazyByteString (Data.ByteString.Builder.int64HexFixed arg0)", resTFirstSoln = 2.60181861, resTEncFirstSoln = 0.8485932249999999, resTSolveFirstSoln = 1.6464867520000002, resLenFirstSoln = 2, resRefinementSteps = 4, resTransitions = [487,329,303,279], resTypes = [7,5,4,3], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Baseline", queryName = "intToBytestring", queryStr = "Int64 -> ByteString", result = Result {resSolutionOrError = Right "Just Data.ByteString.Builder.toLazyByteString (Data.ByteString.Builder.int64Dec arg0)", resTFirstSoln = 5.439384465, resTEncFirstSoln = 4.748632199, resTSolveFirstSoln = 0.68849505, resLenFirstSoln = 2, resRefinementSteps = 0, resTransitions = [], resTypes = [], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Zero Cover Start", queryName = "intToBytestring", queryStr = "Int64 -> ByteString", result = Result {resSolutionOrError = Right "Just Data.ByteString.Builder.toLazyByteString (Data.ByteString.Builder.int64Dec arg0)", resTFirstSoln = 9.264115982, resTEncFirstSoln = 1.60312208, resTSolveFirstSoln = 7.385288796999999, resLenFirstSoln = 2, resRefinementSteps = 8, resTransitions = [597,487,387,275,248,219,197,170], resTypes = [9,7,6,5,4,3,2,1], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Stop Early", queryName = "intToBytestring", queryStr = "Int64 -> ByteString", result = Result {resSolutionOrError = Right "Just Data.ByteString.Builder.toLazyByteString (Data.ByteString.Builder.int64HexFixed arg0)", resTFirstSoln = 2.680188474, resTEncFirstSoln = 0.876621954, resTSolveFirstSoln = 1.685425076, resLenFirstSoln = 2, resRefinementSteps = 4, resTransitions = [487,329,303,279], resTypes = [7,5,4,3], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Zero Cover with Stop Early", queryName = "intToBytestring", queryStr = "Int64 -> ByteString", result = Result {resSolutionOrError = Right "Just Data.ByteString.Lazy.drop arg0 Data.ByteString.Lazy.empty", resTFirstSoln = 12.803666004, resTEncFirstSoln = 2.007268605, resTSolveFirstSoln = 10.261508069, resLenFirstSoln = 2, resRefinementSteps = 10, resTransitions = [717,551,490,448,387,275,248,219,197,170], resTypes = [11,9,8,7,6,5,4,3,2,1], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "No Gar", queryName = "intToBytestring", queryStr = "Int64 -> ByteString", result = Result {resSolutionOrError = Right "Just Data.ByteString.Builder.toLazyByteString (Data.ByteString.Builder.int64Dec arg0)", resTFirstSoln = 1.6620299189999999, resTEncFirstSoln = 0.160166408, resTSolveFirstSoln = 1.4202919819999997, resLenFirstSoln = 2, resRefinementSteps = 373, resTransitionsresTypes = [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Query Refinement", queryName = "conjunctMaybe", queryStr = "List (Maybe Bool) -> Bool", result = Result {resSolutionOrError = Right "Just GHC.List.null arg0", resTFirstSoln = 9.3807931e-2, resTEncFirstSoln = 8.432646e-2, resTSolveFirstSoln = 7.941472e-3, resLenFirstSoln = 1, resRefinementSteps = 0, resTransitions = [], resTypes = [], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Baseline", queryName = "conjunctMaybe", queryStr = "List (Maybe Bool) -> Bool", result = Result {resSolutionOrError = Right "Just GHC.List.null arg0", resTFirstSoln = 6.3687626470000005, resTEncFirstSoln = 4.328066782, resTSolveFirstSoln = 2.039338999, resLenFirstSoln = 1, resRefinementSteps = 2, resTransitions = [1797,1797], resTypes = [26,26], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Zero Cover Start", queryName = "conjunctMaybe", queryStr = "List (Maybe Bool) -> Bool", result = Result {resSolutionOrError = Right "Just GHC.List.null arg0", resTFirstSoln = 0.6524394499999999, resTEncFirstSoln = 0.434504303, resTSolveFirstSoln = 0.10422102899999999, resLenFirstSoln = 1, resRefinementSteps = 5, resTransitions = [455,327,277,249,170], resTypes = [6,4,3,2,1], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Stop Early", queryName = "conjunctMaybe", queryStr = "List (Maybe Bool) -> Bool", result = Result {resSolutionOrError = Right "Just GHC.List.null arg0", resTFirstSoln = 9.264791600000001e-2, resTEncFirstSoln = 8.4470346e-2, resTSolveFirstSoln = 7.881331e-3, resLenFirstSoln = 1, resRefinementSteps = 0, resTransitions = [], resTypes = [], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Zero Cover with Stop Early", queryName = "conjunctMaybe", queryStr = "List (Maybe Bool) -> Bool", result = Result {resSolutionOrError = Right "Just GHC.List.null arg0", resTFirstSoln = 0.615397699, resTEncFirstSoln = 0.4311163, resTSolveFirstSoln = 8.798548e-2, resLenFirstSoln = 1, resRefinementSteps = 5, resTransitions = [455,327,277,249,170], resTypes = [6,4,3,2,1], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "No Gar", queryName = "conjunctMaybe", queryStr = "List (Maybe Bool) -> Bool", result = Result {resSolutionOrError = Right "Just GHC.List.null arg0", resTFirstSoln = 9.147277000000001e-2, resTEncFirstSoln = 8.187406e-2, resTSolveFirstSoln = 9.05294e-3, resLenFirstSoln = 1, resRefinementSteps = 0, resTransitions = [], resTypes = [], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Query Refinement", queryName = "firstMaybe", queryStr = "a -> List (Maybe a) -> a", result = Result {resSolutionOrError = Right "Just Data.Bool.bool arg1 arg1 (GHC.List.null arg0)", resTFirstSoln = 39.926056458, resTEncFirstSoln = 3.755924469, resTSolveFirstSoln = 34.572343159, resLenFirstSoln = 3, resRefinementSteps = 11, resTransitions = [1144,972,906,693,640,584,476,414,284,258,234], resTypes = [15,13,12,10,9,8,7,6,5,4,3], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Baseline", queryName = "firstMaybe", queryStr = "a -> List (Maybe a) -> a", result = Result {resSolutionOrError = Right "Just Data.Bool.bool arg1 arg1 (GHC.List.null arg0)", resTFirstSoln = 32.151907163000004, resTEncFirstSoln = 6.048662782999999, resTSolveFirstSoln = 26.098794516999998, resLenFirstSoln = 3, resRefinementSteps = 5, resTransitions = [1878,1878,1878,1878,1878], resTypes = [27,27,27,27,27], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Zero Cover Start", queryName = "firstMaybe", queryStr = "a -> List (Maybe a) -> a", result = Result {resSolutionOrError = Left Timeout, resTFirstSoln = 0.0, resTEncFirstSoln = 0.0, resTSolveFirstSoln = 0.0, resLenFirstSoln = 0, resRefinementSteps = 0, resTransitions = [], resTypes = [], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Stop Early", queryName = "firstMaybe", queryStr = "a -> List (Maybe a) -> a", result = Result {resSolutionOrError = Right "Just Data.Bool.bool arg1 arg1 (GHC.List.null arg0)", resTFirstSoln = 84.000642611, resTEncFirstSoln = 6.815302418999999, resTSolveFirstSoln = 74.860245209, resLenFirstSoln = 3, resRefinementSteps = 13, resTransitions = [1461,1333,1055,990,924,813,752,584,476,414,284,258,234], resTypes = [17,15,13,12,11,10,9,8,7,6,5,4,3], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Zero Cover with Stop Early", queryName = "firstMaybe", queryStr = "a -> List (Maybe a) -> a", result = Result {resSolutionOrError = Right "Just Data.Bool.bool arg1 arg1 (GHC.List.null arg0)", resTFirstSoln = 44.435866028, resTEncFirstSoln = 3.563231722, resTSolveFirstSoln = 39.537199221, resLenFirstSoln = 3, resRefinementSteps = 13, resTransitions = [1097,905,839,731,671,613,542,414,380,348,275,188,170], resTypes = [14,12,11,10,9,8,7,6,5,4,3,2,1], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "No Gar", queryName = "firstMaybe", queryStr = "a -> List (Maybe a) -> a", result = Result {resSolutionOrError = Right "Just Data.Bool.bool arg1 arg1 (GHC.List.null arg0)", resTFirstSoln = 23.711990550000003, resTEncFirstSoln = 0.21926125600000002, resTSolveFirstSoln = 22.012959847000033, resLenFirstSoln = 3, resRefinementSteps = 3611, resTransitionsresTypes = [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Query Refinement", queryName = "both", queryStr = "Pair a a -> (a -> b) -> Pair b b", result = Result {resSolutionOrError = Left Timeout, resTFirstSoln = 0.0, resTEncFirstSoln = 0.0, resTSolveFirstSoln = 0.0, resLenFirstSoln = 0, resRefinementSteps = 0, resTransitions = [], resTypes = [], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Baseline", queryName = "both", queryStr = "Pair a a -> (a -> b) -> Pair b b", result = Result {resSolutionOrError = Left Timeout, resTFirstSoln = 0.0, resTEncFirstSoln = 0.0, resTSolveFirstSoln = 0.0, resLenFirstSoln = 0, resRefinementSteps = 0, resTransitions = [], resTypes = [], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Zero Cover Start", queryName = "both", queryStr = "Pair a a -> (a -> b) -> Pair b b", result = Result {resSolutionOrError = Left Timeout, resTFirstSoln = 0.0, resTEncFirstSoln = 0.0, resTSolveFirstSoln = 0.0, resLenFirstSoln = 0, resRefinementSteps = 0, resTransitions = [], resTypes = [], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Stop Early", queryName = "both", queryStr = "Pair a a -> (a -> b) -> Pair b b", result = Result {resSolutionOrError = Left Timeout, resTFirstSoln = 0.0, resTEncFirstSoln = 0.0, resTSolveFirstSoln = 0.0, resLenFirstSoln = 0, resRefinementSteps = 0, resTransitions = [], resTypes = [], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Zero Cover with Stop Early", queryName = "both", queryStr = "Pair a a -> (a -> b) -> Pair b b", result = Result {resSolutionOrError = Left Timeout, resTFirstSoln = 0.0, resTEncFirstSoln = 0.0, resTSolveFirstSoln = 0.0, resLenFirstSoln = 0, resRefinementSteps = 0, resTransitions = [], resTypes = [], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "No Gar", queryName = "both", queryStr = "Pair a a -> (a -> b) -> Pair b b", result = Result {resSolutionOrError = Right "Just (,) (arg0 (fst arg1)) (arg0 (snd arg1))", resTFirstSoln = 2.245016761, resTEncFirstSoln = 0.31116610600000005, resTSolveFirstSoln = 1.8823496099999997, resLenFirstSoln = 4, resRefinementSteps = 110, resTransitions = [260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260], resTypes = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Query Refinement", queryName = "Q07", queryStr = "(a -> b -> c -> d) -> (a, c, b) -> d", result = Result {resSolutionOrError = Right "Just arg1 (fst (fst arg0)) (snd arg0) (snd (fst arg0))", resTFirstSoln = 1.467113094, resTEncFirstSoln = 0.35964853500000005, resTSolveFirstSoln = 1.0368986169999999, resLenFirstSoln = 3, resRefinementSteps = 1, resTransitions = [358], resTypes = [8], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Baseline", queryName = "Q07", queryStr = "(a -> b -> c -> d) -> (a, c, b) -> d", result = Result {resSolutionOrError = Right "Just arg1 (fst (fst arg0)) (snd arg0) (snd (fst arg0))", resTFirstSoln = 25.825813262, resTEncFirstSoln = 9.00649707, resTSolveFirstSoln = 16.80466538, resLenFirstSoln = 3, resRefinementSteps = 1, resTransitions = [2141], resTypes = [30], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Zero Cover Start", queryName = "Q07", queryStr = "(a -> b -> c -> d) -> (a, c, b) -> d", result = Result {resSolutionOrError = Right "Just arg1 (fst (fst arg0)) (snd arg0) (snd (fst arg0))", resTFirstSoln = 1.047808911, resTEncFirstSoln = 0.226581055, resTSolveFirstSoln = 0.744006835, resLenFirstSoln = 3, resRefinementSteps = 3, resTransitions = [302,191,171], resTypes = [6,2,1], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Stop Early", queryName = "Q07", queryStr = "(a -> b -> c -> d) -> (a, c, b) -> d", result = Result {resSolutionOrError = Right "Just arg1 (fst (fst arg0)) (snd arg0) (snd (fst arg0))", resTFirstSoln = 1.62222124, resTEncFirstSoln = 0.523270352, resTSolveFirstSoln = 1.0278226419999998, resLenFirstSoln = 3, resRefinementSteps = 1, resTransitions = [358], resTypes = [8], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Zero Cover with Stop Early", queryName = "Q07", queryStr = "(a -> b -> c -> d) -> (a, c, b) -> d", result = Result {resSolutionOrError = Right "Just arg1 (fst (fst arg0)) (snd arg0) (snd (fst arg0))", resTFirstSoln = 1.0848420029999999, resTEncFirstSoln = 0.22715389300000002, resTSolveFirstSoln = 0.7805057320000001, resLenFirstSoln = 3, resRefinementSteps = 3, resTransitions = [302,191,171], resTypes = [6,2,1], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "No Gar", queryName = "Q07", queryStr = "(a -> b -> c -> d) -> (a, c, b) -> d", result = Result {resSolutionOrError = Right "Just arg1 (fst (fst arg0)) (snd arg0) (snd (fst arg0))", resTFirstSoln = 0.526899008, resTEncFirstSoln = 0.261652163, resTSolveFirstSoln = 0.259697458, resLenFirstSoln = 3, resRefinementSteps = 6, resTransitions = [290,290,290,290,290,290], resTypes = [6,6,6,6,6,6], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Query Refinement", queryName = "Q08", queryStr = "Maybe a -> a -> Maybe a", result = Result {resSolutionOrError = Right "Just Data.Maybe.Just (Data.Maybe.fromMaybe arg0 arg1)", resTFirstSoln = 11.421104793, resTEncFirstSoln = 1.836485019, resTSolveFirstSoln = 9.040387796000001, resLenFirstSoln = 2, resRefinementSteps = 8, resTransitions = [782,598,524,413,374,263,237,213], resTypes = [11,9,8,7,6,5,4,3], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Baseline", queryName = "Q08", queryStr = "Maybe a -> a -> Maybe a", result = Result {resSolutionOrError = Right "Just Data.Maybe.Just (Data.Maybe.fromMaybe arg0 arg1)", resTFirstSoln = 12.316072609999999, resTEncFirstSoln = 5.69135572, resTSolveFirstSoln = 6.621044255, resLenFirstSoln = 2, resRefinementSteps = 4, resTransitions = [1878,1878,1878,1878], resTypes = [27,27,27,27], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Zero Cover Start", queryName = "Q08", queryStr = "Maybe a -> a -> Maybe a", result = Result {resSolutionOrError = Right "Just Data.Maybe.Just (Data.Maybe.fromMaybe arg0 arg1)", resTFirstSoln = 13.749233594, resTEncFirstSoln = 1.648840393, resTSolveFirstSoln = 11.417245603, resLenFirstSoln = 2, resRefinementSteps = 10, resTransitions = [782,677,598,491,383,271,239,214,193,170], resTypes = [11,9,8,7,6,5,4,3,2,1], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Stop Early", queryName = "Q08", queryStr = "Maybe a -> a -> Maybe a", result = Result {resSolutionOrError = Right "Just Data.Maybe.Just (Data.Maybe.fromMaybe arg0 arg1)", resTFirstSoln = 2.795933854, resTEncFirstSoln = 0.619902587, resTSolveFirstSoln = 1.985870753, resLenFirstSoln = 2, resRefinementSteps = 5, resTransitions = [478,374,263,237,213], resTypes = [8,6,5,4,3], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Zero Cover with Stop Early", queryName = "Q08", queryStr = "Maybe a -> a -> Maybe a", result = Result {resSolutionOrError = Right "Just Data.Maybe.Just (Data.Maybe.fromMaybe arg0 arg1)", resTFirstSoln = 1.9390710089999998, resTEncFirstSoln = 0.6179771949999999, resTSolveFirstSoln = 1.181268697, resLenFirstSoln = 2, resRefinementSteps = 6, resTransitions = [439,266,239,214,193,170], resTypes = [7,5,4,3,2,1], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "No Gar", queryName = "Q08", queryStr = "Maybe a -> a -> Maybe a", result = Result {resSolutionOrError = Right "Just Data.Maybe.Just (Data.Maybe.fromMaybe arg0 arg1)", resTFirstSoln = 0.274968365, resTEncFirstSoln = 8.4305135e-2, resTSolveFirstSoln = 0.188991307, resLenFirstSoln = 2, resRefinementSteps = 5, resTransitions = [213,213,213,213,213], resTypes = [3,3,3,3,3], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Query Refinement", queryName = "Q09", queryStr = "List (a) -> List (a) -> Int", result = Result {resSolutionOrError = Right "Just GHC.List.length ((GHC.List.++) arg0 arg1)", resTFirstSoln = 5.8436238089999994, resTEncFirstSoln = 1.039028992, resTSolveFirstSoln = 4.609959362, resLenFirstSoln = 2, resRefinementSteps = 5, resTransitions = [562,444,407,372,249], resTypes = [8,6,5,4,3], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Baseline", queryName = "Q09", queryStr = "List (a) -> List (a) -> Int", result = Result {resSolutionOrError = Right "Just GHC.List.length (GHC.List.zip arg0 arg1)", resTFirstSoln = 10.75732112, resTEncFirstSoln = 5.446222312, resTSolveFirstSoln = 5.309444915, resLenFirstSoln = 2, resRefinementSteps = 0, resTransitions = [], resTypes = [], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Zero Cover Start", queryName = "Q09", queryStr = "List (a) -> List (a) -> Int", result = Result {resSolutionOrError = Right "Just GHC.List.length ((GHC.List.++) arg0 arg1)", resTFirstSoln = 1.44427978, resTEncFirstSoln = 0.637372379, resTSolveFirstSoln = 0.6522085639999999, resLenFirstSoln = 2, resRefinementSteps = 6, resTransitions = [485,381,349,277,249,170], resTypes = [7,5,4,3,2,1], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Stop Early", queryName = "Q09", queryStr = "List (a) -> List (a) -> Int", result = Result {resSolutionOrError = Right "Just GHC.List.length ((GHC.List.++) arg0 arg1)", resTFirstSoln = 1.044583245, resTEncFirstSoln = 0.557143179, resTSolveFirstSoln = 0.44386007, resLenFirstSoln = 2, resRefinementSteps = 2, resTransitions = [407,249], resTypes = [5,3], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Zero Cover with Stop Early", queryName = "Q09", queryStr = "List (a) -> List (a) -> Int", result = Result {resSolutionOrError = Right "Just GHC.List.length ((GHC.List.++) arg0 arg1)", resTFirstSoln = 4.483316605, resTEncFirstSoln = 0.622447085, resTSolveFirstSoln = 3.7068573760000003, resLenFirstSoln = 2, resRefinementSteps = 6, resTransitions = [485,387,349,277,249,170], resTypes = [7,5,4,3,2,1], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "No Gar", queryName = "Q09", queryStr = "List (a) -> List (a) -> Int", result = Result {resSolutionOrError = Right "Just GHC.List.length ((GHC.List.++) arg0 arg1)", resTFirstSoln = 0.22008791, resTEncFirstSoln = 0.11418703200000001, resTSolveFirstSoln = 0.104224554, resLenFirstSoln = 2, resRefinementSteps = 2, resTransitions = [249,249], resTypes = [3,3], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Query Refinement", queryName = "Q12", queryStr = "Int -> List Int", result = Result {resSolutionOrError = Right "Just Data.Maybe.maybeToList (Data.Maybe.Just arg0)", resTFirstSoln = 3.162438903, resTEncFirstSoln = 0.936216986, resTSolveFirstSoln = 2.076359363, resLenFirstSoln = 2, resRefinementSteps = 5, resTransitions = [500,344,314,286,252], resTypes = [8,6,5,4,3], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Baseline", queryName = "Q12", queryStr = "Int -> List Int", result = Result {resSolutionOrError = Right "Just GHC.List.take arg0 []", resTFirstSoln = 12.774412781999999, resTEncFirstSoln = 5.281008088, resTSolveFirstSoln = 7.491281233, resLenFirstSoln = 2, resRefinementSteps = 1, resTransitions = [1797], resTypes = [26], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Zero Cover Start", queryName = "Q12", queryStr = "Int -> List Int", result = Result {resSolutionOrError = Right "Just GHC.List.take arg0 []", resTFirstSoln = 8.468074029, resTEncFirstSoln = 1.733852998, resTSolveFirstSoln = 6.401467198000001, resLenFirstSoln = 2, resRefinementSteps = 9, resTransitions = [674,501,418,370,330,299,223,199,170], resTypes = [10,8,7,6,5,4,3,2,1], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Stop Early", queryName = "Q12", queryStr = "Int -> List Int", result = Result {resSolutionOrError = Right "Just GHC.List.take arg0 []", resTFirstSoln = 8.540465020000001, resTEncFirstSoln = 2.251192094, resTSolveFirstSoln = 5.863112962, resLenFirstSoln = 2, resRefinementSteps = 8, resTransitions = [718,570,500,454,344,314,286,252], resTypes = [11,9,8,7,6,5,4,3], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Zero Cover with Stop Early", queryName = "Q12", queryStr = "Int -> List Int", result = Result {resSolutionOrError = Right "Just Data.Maybe.maybeToList (Data.Maybe.Just arg0)", resTFirstSoln = 7.985988778, resTEncFirstSoln = 1.499651154, resTSolveFirstSoln = 6.1607325490000004, resLenFirstSoln = 2, resRefinementSteps = 9, resTransitions = [617,483,418,370,330,299,223,199,170], resTypes = [10,8,7,6,5,4,3,2,1], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "No Gar", queryName = "Q12", queryStr = "Int -> List Int", result = Result {resSolutionOrError = Right "Just GHC.List.replicate arg0 arg0", resTFirstSoln = 0.408186818, resTEncFirstSoln = 0.131941119, resTSolveFirstSoln = 0.274857329, resLenFirstSoln = 2, resRefinementSteps = 6, resTransitions = [252,252,252,252,252,252], resTypes = [3,3,3,3,3,3], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Query Refinement", queryName = "Q14", queryStr = "(a -> b -> c) -> (a -> b) -> a -> c", result = Result {resSolutionOrError = Right "Just arg2 arg0 (arg1 arg0)", resTFirstSoln = 5.088659058999999, resTEncFirstSoln = 0.858199454, resTSolveFirstSoln = 4.093772413, resLenFirstSoln = 3, resRefinementSteps = 4, resTransitions = [481,380,339,236], resTypes = [8,6,5,4], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Baseline", queryName = "Q14", queryStr = "(a -> b -> c) -> (a -> b) -> a -> c", result = Result {resSolutionOrError = Right "Just arg2 arg0 (arg1 arg0)", resTFirstSoln = 31.998417473, resTEncFirstSoln = 7.7584259939999995, resTSolveFirstSoln = 24.23859907, resLenFirstSoln = 3, resRefinementSteps = 0, resTransitions = [], resTypes = [], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Zero Cover Start", queryName = "Q14", queryStr = "(a -> b -> c) -> (a -> b) -> a -> c", result = Result {resSolutionOrError = Right "Just arg2 arg0 (arg1 arg0)", resTFirstSoln = 1.999007094, resTEncFirstSoln = 0.470297163, resTSolveFirstSoln = 1.4465992559999998, resLenFirstSoln = 3, resRefinementSteps = 5, resTransitions = [376,299,274,195,172], resTypes = [6,4,3,2,1], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Stop Early", queryName = "Q14", queryStr = "(a -> b -> c) -> (a -> b) -> a -> c", result = Result {resSolutionOrError = Right "Just arg2 arg0 (arg1 arg0)", resTFirstSoln = 10.214363333, resTEncFirstSoln = 1.411855896, resTSolveFirstSoln = 8.601118957, resLenFirstSoln = 3, resRefinementSteps = 5, resTransitions = [584,441,394,339,236], resTypes = [9,7,6,5,4], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Zero Cover with Stop Early", queryName = "Q14", queryStr = "(a -> b -> c) -> (a -> b) -> a -> c", result = Result {resSolutionOrError = Right "Just arg2 arg0 (arg1 arg0)", resTFirstSoln = 2.736397596, resTEncFirstSoln = 0.6251306350000001, resTSolveFirstSoln = 2.052720822, resLenFirstSoln = 3, resRefinementSteps = 4, resTransitions = [406,274,195,172], resTypes = [5,3,2,1], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "No Gar", queryName = "Q14", queryStr = "(a -> b -> c) -> (a -> b) -> a -> c", result = Result {resSolutionOrError = Right "Just arg2 arg0 (arg1 arg0)", resTFirstSoln = 0.507551794, resTEncFirstSoln = 0.136689794, resTSolveFirstSoln = 0.36681429299999996, resLenFirstSoln = 3, resRefinementSteps = 14, resTransitions = [236,236,236,236,236,236,236,236,236,236,236,236,236,236], resTypes = [4,4,4,4,4,4,4,4,4,4,4,4,4,4], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Query Refinement", queryName = "Q15", queryStr = "a -> List (a) -> Pair (List (a)) (List (a))", result = Result {resSolutionOrError = Left Timeout, resTFirstSoln = 0.0, resTEncFirstSoln = 0.0, resTSolveFirstSoln = 0.0, resLenFirstSoln = 0, resRefinementSteps = 0, resTransitions = [], resTypes = [], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Baseline", queryName = "Q15", queryStr = "a -> List (a) -> Pair (List (a)) (List (a))", result = Result {resSolutionOrError = Left Timeout, resTFirstSoln = 0.0, resTEncFirstSoln = 0.0, resTSolveFirstSoln = 0.0, resLenFirstSoln = 0, resRefinementSteps = 0, resTransitions = [], resTypes = [], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Zero Cover Start", queryName = "Q15", queryStr = "a -> List (a) -> Pair (List (a)) (List (a))", result = Result {resSolutionOrError = Left Timeout, resTFirstSoln = 0.0, resTEncFirstSoln = 0.0, resTSolveFirstSoln = 0.0, resLenFirstSoln = 0, resRefinementSteps = 0, resTransitions = [], resTypes = [], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Stop Early", queryName = "Q15", queryStr = "a -> List (a) -> Pair (List (a)) (List (a))", result = Result {resSolutionOrError = Right "Just (,) ((:) arg1 arg0) arg0", resTFirstSoln = 59.434973854999996, resTEncFirstSoln = 9.177046327000001, resTSolveFirstSoln = 46.91074739199999, resLenFirstSoln = 3, resRefinementSteps = 14, resTransitions = [1548,1548,1548,1548,1308,1158,954,600,544,452,415,335,304,260], resTypes = [21,21,21,21,18,17,14,12,11,9,8,6,5,4], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Zero Cover with Stop Early", queryName = "Q15", queryStr = "a -> List (a) -> Pair (List (a)) (List (a))", result = Result {resSolutionOrError = Right "Just (,) ((:) arg1 arg0) arg0", resTFirstSoln = 59.755912305, resTEncFirstSoln = 8.800110896, resTSolveFirstSoln = 47.767958797, resLenFirstSoln = 3, resRefinementSteps = 25, resTransitions = [1474,1474,1474,1474,1474,1474,1474,1474,1474,1474,1474,1474,1474,1312,926,740,630,574,531,380,304,249,222,188,170], resTypes = [20,20,20,20,20,20,20,20,20,20,20,20,20,19,15,12,10,9,8,7,5,4,3,2,1], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "No Gar", queryName = "Q15", queryStr = "a -> List (a) -> Pair (List (a)) (List (a))", result = Result {resSolutionOrError = Right "Just (,) ((:) arg1 arg0) arg0", resTFirstSoln = 2.732588276, resTEncFirstSoln = 0.30827298599999997, resTSolveFirstSoln = 2.2977178339999997, resLenFirstSoln = 3, resRefinementSteps = 444, resTransitionsresTypes = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Query Refinement", queryName = "Q17", queryStr = "(t2 -> t1 -> t) -> (t1 -> t2) -> t1 -> t", result = Result {resSolutionOrError = Right "Just arg2 (arg1 arg0) arg0", resTFirstSoln = 4.905177788, resTEncFirstSoln = 1.112940656, resTSolveFirstSoln = 3.655549937, resLenFirstSoln = 3, resRefinementSteps = 4, resTransitions = [542,380,268,236], resTypes = [8,6,5,4], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Baseline", queryName = "Q17", queryStr = "(t2 -> t1 -> t) -> (t1 -> t2) -> t1 -> t", result = Result {resSolutionOrError = Right "Just arg2 (arg1 arg0) arg0", resTFirstSoln = 43.575500146, resTEncFirstSoln = 7.503354078, resTSolveFirstSoln = 36.070333147999996, resLenFirstSoln = 3, resRefinementSteps = 0, resTransitions = [], resTypes = [], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Zero Cover Start", queryName = "Q17", queryStr = "(t2 -> t1 -> t) -> (t1 -> t2) -> t1 -> t", result = Result {resSolutionOrError = Right "Just arg2 (arg1 arg0) arg0", resTFirstSoln = 0.19958899300000002, resTEncFirstSoln = 9.3316722e-2, resTSolveFirstSoln = 0.100014293, resLenFirstSoln = 3, resRefinementSteps = 1, resTransitions = [191], resTypes = [2], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Stop Early", queryName = "Q17", queryStr = "(t2 -> t1 -> t) -> (t1 -> t2) -> t1 -> t", result = Result {resSolutionOrError = Right "Just arg2 (arg1 arg0) arg0", resTFirstSoln = 6.525059828, resTEncFirstSoln = 1.594832602, resTSolveFirstSoln = 4.730414955, resLenFirstSoln = 3, resRefinementSteps = 5, resTransitions = [584,492,394,339,236], resTypes = [9,7,6,5,4], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Zero Cover with Stop Early", queryName = "Q17", queryStr = "(t2 -> t1 -> t) -> (t1 -> t2) -> t1 -> t", result = Result {resSolutionOrError = Right "Just arg2 (arg1 arg0) arg0", resTFirstSoln = 4.35777841, resTEncFirstSoln = 0.8899494539999999, resTSolveFirstSoln = 3.3493325769999998, resLenFirstSoln = 3, resRefinementSteps = 6, resTransitions = [499,343,257,225,191,172], resTypes = [7,5,4,3,2,1], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "No Gar", queryName = "Q17", queryStr = "(t2 -> t1 -> t) -> (t1 -> t2) -> t1 -> t", result = Result {resSolutionOrError = Right "Just arg2 (arg1 arg0) arg0", resTFirstSoln = 1.703577267, resTEncFirstSoln = 0.287468299, resTSolveFirstSoln = 1.411944742, resLenFirstSoln = 3, resRefinementSteps = 14, resTransitions = [236,236,236,236,236,236,236,236,236,236,236,236,236,236], resTypes = [4,4,4,4,4,4,4,4,4,4,4,4,4,4], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Query Refinement", queryName = "Q21", queryStr = "String -> Char -> List (String)", result = Result {resSolutionOrError = Right "Just (:) ((:) arg0 arg1) []", resTFirstSoln = 59.304851511, resTEncFirstSoln = 6.581467905, resTSolveFirstSoln = 50.643156482, resLenFirstSoln = 3, resRefinementSteps = 12, resTransitions = [1564,1262,1070,789,661,616,533,493,447,412,361,333], resTypes = [16,14,13,12,11,10,9,8,7,6,5,4], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Baseline", queryName = "Q21", queryStr = "String -> Char -> List (String)", result = Result {resSolutionOrError = Right "Just GHC.List.replicate (GHC.List.length arg1) (Text.Show.show arg0)", resTFirstSoln = 94.50359116999999, resTEncFirstSoln = 5.425717619, resTSolveFirstSoln = 88.86373355100002, resLenFirstSoln = 3, resRefinementSteps = 312, resTransitionsresTypesresDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Zero Cover Start", queryName = "Q21", queryStr = "String -> Char -> List (String)", result = Result {resSolutionOrError = Right "Just Data.Maybe.maybeToList (Data.Maybe.Just (Text.Show.showChar arg0 arg1))", resTFirstSoln = 25.400036021, resTEncFirstSoln = 2.894858754, resTSolveFirstSoln = 21.643739873999998, resLenFirstSoln = 3, resRefinementSteps = 11, resTransitions = [910,716,617,562,519,478,419,316,286,249,170], resTypes = [12,10,9,8,7,6,5,4,3,2,1], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Stop Early", queryName = "Q21", queryStr = "String -> Char -> List (String)", result = Result {resSolutionOrError = Right "Just Data.Maybe.maybeToList (Data.Maybe.Just (Text.Show.shows arg0 arg1))", resTFirstSoln = 104.0335652, resTEncFirstSoln = 12.529280320999998, resTSolveFirstSoln = 87.58384496, resLenFirstSoln = 3, resRefinementSteps = 14, resTransitions = [2133,1693,1565,1333,934,789,661,616,533,493,447,412,361,333], resTypes = [20,17,16,15,13,12,11,10,9,8,7,6,5,4], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Zero Cover with Stop Early", queryName = "Q21", queryStr = "String -> Char -> List (String)", result = Result {resSolutionOrError = Left Timeout, resTFirstSoln = 0.0, resTEncFirstSoln = 0.0, resTSolveFirstSoln = 0.0, resLenFirstSoln = 0, resRefinementSteps = 0, resTransitions = [], resTypes = [], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "No Gar", queryName = "Q21", queryStr = "String -> Char -> List (String)", result = Result {resSolutionOrError = Right "Just GHC.List.replicate (GHC.List.length arg1) (Text.Show.show arg0)", resTFirstSoln = 25.993727852, resTEncFirstSoln = 0.25556028999999997, resTSolveFirstSoln = 24.597866270999997, resLenFirstSoln = 3, resRefinementSteps = 2672, resTransitionsresTypes = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Query Refinement", queryName = "Q22", queryStr = "a -> List (a) -> Maybe a", result = Result {resSolutionOrError = Right "Just Data.Maybe.listToMaybe ((:) arg1 arg0)", resTFirstSoln = 10.363632857, resTEncFirstSoln = 1.343251184, resTSolveFirstSoln = 8.230426803, resLenFirstSoln = 2, resRefinementSteps = 7, resTransitions = [763,655,607,526,338,289,263], resTypes = [12,10,9,8,6,5,4], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Baseline", queryName = "Q22", queryStr = "a -> List (a) -> Maybe a", result = Result {resSolutionOrError = Right "Just Data.Maybe.listToMaybe ((:) arg1 arg0)", resTFirstSoln = 19.357974173000002, resTEncFirstSoln = 5.662148283, resTSolveFirstSoln = 13.689323637000001, resLenFirstSoln = 2, resRefinementSteps = 11, resTransitions = [1878,1878,1878,1878,1878,1878,1878,1878,1878,1878,1878], resTypes = [27,27,27,27,27,27,27,27,27,27,27], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Zero Cover Start", queryName = "Q22", queryStr = "a -> List (a) -> Maybe a", result = Result {resSolutionOrError = Right "Just Data.Maybe.listToMaybe ((:) arg1 arg0)", resTFirstSoln = 0.410991577, resTEncFirstSoln = 0.24534085299999997, resTSolveFirstSoln = 0.114437452, resLenFirstSoln = 2, resRefinementSteps = 4, resTransitions = [304,236,188,170], resTypes = [5,3,2,1], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Stop Early", queryName = "Q22", queryStr = "a -> List (a) -> Maybe a", result = Result {resSolutionOrError = Right "Just Data.Maybe.listToMaybe ((:) arg1 arg0)", resTFirstSoln = 11.272015424000001, resTEncFirstSoln = 1.49041782, resTSolveFirstSoln = 9.019099133, resLenFirstSoln = 2, resRefinementSteps = 7, resTransitions = [785,655,569,526,338,289,263], resTypes = [12,10,9,8,6,5,4], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Zero Cover with Stop Early", queryName = "Q22", queryStr = "a -> List (a) -> Maybe a", result = Result {resSolutionOrError = Right "Just Data.Maybe.listToMaybe ((:) arg1 arg0)", resTFirstSoln = 15.310510403, resTEncFirstSoln = 1.346002001, resTSolveFirstSoln = 13.432961276, resLenFirstSoln = 2, resRefinementSteps = 10, resTransitions = [725,579,528,376,335,304,249,222,188,170], resTypes = [11,9,8,7,6,5,4,3,2,1], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "No Gar", queryName = "Q22", queryStr = "a -> List (a) -> Maybe a", result = Result {resSolutionOrError = Right "Just Data.Maybe.listToMaybe ((:) arg1 arg0)", resTFirstSoln = 0.41580542600000003, resTEncFirstSoln = 0.128269004, resTSolveFirstSoln = 0.280696286, resLenFirstSoln = 2, resRefinementSteps = 20, resTransitions = [263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263], resTypes = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Query Refinement", queryName = "Q24", queryStr = "List (a) -> a -> Int", result = Result {resSolutionOrError = Right "Just GHC.List.length ((:) arg0 arg1)", resTFirstSoln = 4.6104633349999995, resTEncFirstSoln = 0.8195972579999999, resTSolveFirstSoln = 3.5746870909999995, resLenFirstSoln = 2, resRefinementSteps = 5, resTransitions = [556,464,355,322,276], resTypes = [9,7,6,5,4], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Baseline", queryName = "Q24", queryStr = "List (a) -> a -> Int", result = Result {resSolutionOrError = Right "Just GHC.List.length ((:) arg0 arg1)", resTFirstSoln = 13.055258708, resTEncFirstSoln = 5.443940609, resTSolveFirstSoln = 7.608884697, resLenFirstSoln = 2, resRefinementSteps = 1, resTransitions = [1878], resTypes = [27], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Zero Cover Start", queryName = "Q24", queryStr = "List (a) -> a -> Int", result = Result {resSolutionOrError = Right "Just GHC.List.length ((:) arg0 arg1)", resTFirstSoln = 3.635355639, resTEncFirstSoln = 0.712647784, resTSolveFirstSoln = 2.729055013, resLenFirstSoln = 2, resRefinementSteps = 7, resTransitions = [528,439,355,320,275,249,170], resTypes = [8,6,5,4,3,2,1], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Stop Early", queryName = "Q24", queryStr = "List (a) -> a -> Int", result = Result {resSolutionOrError = Right "Just GHC.List.length ((:) arg0 arg1)", resTFirstSoln = 4.87994464, resTEncFirstSoln = 0.827924515, resTSolveFirstSoln = 3.6466158149999996, resLenFirstSoln = 2, resRefinementSteps = 5, resTransitions = [556,464,355,322,276], resTypes = [9,7,6,5,4], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Zero Cover with Stop Early", queryName = "Q24", queryStr = "List (a) -> a -> Int", result = Result {resSolutionOrError = Right "Just GHC.List.length ((:) arg0 arg1)", resTFirstSoln = 3.696674241, resTEncFirstSoln = 0.70843736, resTSolveFirstSoln = 2.7942182730000003, resLenFirstSoln = 2, resRefinementSteps = 7, resTransitions = [528,439,355,320,275,249,170], resTypes = [8,6,5,4,3,2,1], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "No Gar", queryName = "Q24", queryStr = "List (a) -> a -> Int", result = Result {resSolutionOrError = Right "Just GHC.List.length ((:) arg0 arg1)", resTFirstSoln = 3.801892127, resTEncFirstSoln = 0.143764286, resTSolveFirstSoln = 3.609676237, resLenFirstSoln = 2, resRefinementSteps = 170, resTransitionsresTypes = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Query Refinement", queryName = "Q26", queryStr = "Either a b -> Either a b -> Either a b", result = Result {resSolutionOrError = Right "Just Data.Bool.bool arg0 arg1 Data.Bool.True", resTFirstSoln = 0.279266577, resTEncFirstSoln = 0.149388669, resTSolveFirstSoln = 0.101919662, resLenFirstSoln = 2, resRefinementSteps = 2, resTransitions = [251,190], resTypes = [4,2], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Baseline", queryName = "Q26", queryStr = "Either a b -> Either a b -> Either a b", result = Result {resSolutionOrError = Right "Just Data.Maybe.fromMaybe arg0 (Data.Maybe.Just arg1)", resTFirstSoln = 25.875500328, resTEncFirstSoln = 6.308951271000001, resTSolveFirstSoln = 19.564950548000002, resLenFirstSoln = 2, resRefinementSteps = 0, resTransitions = [], resTypes = [], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Zero Cover Start", queryName = "Q26", queryStr = "Either a b -> Either a b -> Either a b", result = Result {resSolutionOrError = Right "Just Data.Bool.bool arg0 arg1 Data.Bool.otherwise", resTFirstSoln = 0.471114764, resTEncFirstSoln = 0.150368497, resTSolveFirstSoln = 0.284688693, resLenFirstSoln = 2, resRefinementSteps = 3, resTransitions = [251,190,170], resTypes = [4,2,1], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Stop Early", queryName = "Q26", queryStr = "Either a b -> Either a b -> Either a b", result = Result {resSolutionOrError = Right "Just Data.Maybe.fromMaybe arg0 (Data.Maybe.Just arg1)", resTFirstSoln = 1.124146772, resTEncFirstSoln = 0.300003832, resTSolveFirstSoln = 0.7610752749999999, resLenFirstSoln = 2, resRefinementSteps = 3, resTransitions = [362,212,190], resTypes = [6,3,2], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Zero Cover with Stop Early", queryName = "Q26", queryStr = "Either a b -> Either a b -> Either a b", result = Result {resSolutionOrError = Right "Just Data.Bool.bool arg0 arg1 Data.Bool.True", resTFirstSoln = 5.913806429, resTEncFirstSoln = 0.895133533, resTSolveFirstSoln = 4.5992999359999995, resLenFirstSoln = 2, resRefinementSteps = 7, resTransitions = [584,340,302,238,212,190,170], resTypes = [9,7,6,4,3,2,1], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "No Gar", queryName = "Q26", queryStr = "Either a b -> Either a b -> Either a b", result = Result {resSolutionOrError = Right "Just Data.Maybe.fromMaybe arg0 (Data.Maybe.Just arg1)", resTFirstSoln = 0.188823291, resTEncFirstSoln = 7.1947799e-2, resTSolveFirstSoln = 0.109539671, resLenFirstSoln = 2, resRefinementSteps = 13, resTransitions = [190,190,190,190,190,190,190,190,190,190,190,190,190], resTypes = [2,2,2,2,2,2,2,2,2,2,2,2,2], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Query Refinement", queryName = "Q30", queryStr = "Pair a b -> Pair a b -> Pair a b", result = Result {resSolutionOrError = Right "Just Data.Bool.bool arg0 arg1 Data.Bool.False", resTFirstSoln = 3.415768585, resTEncFirstSoln = 0.5971025050000001, resTSolveFirstSoln = 2.599511579, resLenFirstSoln = 2, resRefinementSteps = 6, resTransitions = [458,380,268,236,212,190], resTypes = [8,6,5,4,3,2], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Baseline", queryName = "Q30", queryStr = "Pair a b -> Pair a b -> Pair a b", result = Result {resSolutionOrError = Right "Just Data.Bool.bool arg0 arg1 Data.Bool.otherwise", resTFirstSoln = 16.929750785, resTEncFirstSoln = 6.727935584, resTSolveFirstSoln = 10.19928981, resLenFirstSoln = 2, resRefinementSteps = 1, resTransitions = [1961], resTypes = [28], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Zero Cover Start", queryName = "Q30", queryStr = "Pair a b -> Pair a b -> Pair a b", result = Result {resSolutionOrError = Right "Just Data.Maybe.fromMaybe arg0 (Data.Maybe.Just arg1)", resTFirstSoln = 0.22317137199999998, resTEncFirstSoln = 0.11574510800000001, resTSolveFirstSoln = 8.1138697e-2, resLenFirstSoln = 2, resRefinementSteps = 2, resTransitions = [240,170], resTypes = [4,1], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Stop Early", queryName = "Q30", queryStr = "Pair a b -> Pair a b -> Pair a b", result = Result {resSolutionOrError = Right "Just Data.Maybe.fromMaybe arg0 (Data.Maybe.Just arg1)", resTFirstSoln = 5.382501479, resTEncFirstSoln = 0.938052898, resTSolveFirstSoln = 4.0584187190000005, resLenFirstSoln = 2, resRefinementSteps = 6, resTransitions = [609,380,268,236,212,190], resTypes = [11,6,5,4,3,2], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Zero Cover with Stop Early", queryName = "Q30", queryStr = "Pair a b -> Pair a b -> Pair a b", result = Result {resSolutionOrError = Right "Just Data.Maybe.fromMaybe arg0 (Data.Maybe.Just arg1)", resTFirstSoln = 16.419654077, resTEncFirstSoln = 2.730317749, resTSolveFirstSoln = 10.999883211, resLenFirstSoln = 2, resRefinementSteps = 9, resTransitions = [1245,649,463,381,301,272,240,190,170], resTypes = [20,13,9,7,6,5,4,2,1], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "No Gar", queryName = "Q30", queryStr = "Pair a b -> Pair a b -> Pair a b", result = Result {resSolutionOrError = Right "Just Data.Bool.bool arg0 arg1 Data.Bool.otherwise", resTFirstSoln = 0.161758184, resTEncFirstSoln = 6.8109538e-2, resTSolveFirstSoln = 8.978246200000001e-2, resLenFirstSoln = 2, resRefinementSteps = 6, resTransitions = [190,190,190,190,190,190], resTypes = [2,2,2,2,2,2], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Query Refinement", queryName = "Q31", queryStr = "a -> a -> Maybe a", result = Result {resSolutionOrError = Right "Just Data.Maybe.Just (Data.Bool.bool arg0 arg1 Data.Bool.otherwise)", resTFirstSoln = 32.074923391999995, resTEncFirstSoln = 3.208219786, resTSolveFirstSoln = 27.511806086999997, resLenFirstSoln = 3, resRefinementSteps = 11, resTransitions = [1073,825,775,591,491,420,373,338,263,237,213], resTypes = [14,12,11,10,9,8,7,6,5,4,3], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Baseline", queryName = "Q31", queryStr = "a -> a -> Maybe a", result = Result {resSolutionOrError = Right "Just Data.Maybe.Just (Data.Bool.bool arg0 arg1 Data.Bool.otherwise)", resTFirstSoln = 30.110386722, resTEncFirstSoln = 6.469277063, resTSolveFirstSoln = 23.62733163, resLenFirstSoln = 3, resRefinementSteps = 13, resTransitions = [1878,1878,1878,1878,1878,1878,1878,1878,1878,1878,1878,1878,1878], resTypes = [27,27,27,27,27,27,27,27,27,27,27,27,27], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Zero Cover Start", queryName = "Q31", queryStr = "a -> a -> Maybe a", result = Result {resSolutionOrError = Right "Just GHC.List.lookup ((,) arg0 arg1) []", resTFirstSoln = 25.773842768999998, resTEncFirstSoln = 2.332647263, resTSolveFirstSoln = 22.221594419, resLenFirstSoln = 3, resRefinementSteps = 12, resTransitions = [825,714,657,575,532,481,374,337,234,210,188,170], resTypes = [13,11,10,9,8,7,6,5,4,3,2,1], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Stop Early", queryName = "Q31", queryStr = "a -> a -> Maybe a", result = Result {resSolutionOrError = Right "Just GHC.List.lookup ((,) arg0 arg1) []", resTFirstSoln = 15.193489945, resTEncFirstSoln = 2.301361403, resTSolveFirstSoln = 12.006010493999998, resLenFirstSoln = 3, resRefinementSteps = 9, resTransitions = [804,570,531,434,373,338,263,237,213], resTypes = [12,10,9,8,7,6,5,4,3], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Zero Cover with Stop Early", queryName = "Q31", queryStr = "a -> a -> Maybe a", result = Result {resSolutionOrError = Right "Just GHC.List.lookup ((,) arg0 arg1) []", resTFirstSoln = 21.815118018, resTEncFirstSoln = 1.948535803, resTSolveFirstSoln = 19.065273214999998, resLenFirstSoln = 3, resRefinementSteps = 11, resTransitions = [839,662,609,532,481,440,404,305,210,188,170], resTypes = [12,10,9,8,7,6,5,4,3,2,1], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "No Gar", queryName = "Q31", queryStr = "a -> a -> Maybe a", result = Result {resSolutionOrError = Right "Just Data.Maybe.Just (Data.Maybe.fromMaybe arg0 (Data.Maybe.Just arg1))", resTFirstSoln = 6.699479213, resTEncFirstSoln = 0.10867084800000001, resTSolveFirstSoln = 5.9478934159999985, resLenFirstSoln = 3, resRefinementSteps = 396, resTransitionsresTypes = [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Query Refinement", queryName = "Q34", queryStr = "List (Either a b) -> Either a (List (b))", result = Result {resSolutionOrError = Left Timeout, resTFirstSoln = 0.0, resTEncFirstSoln = 0.0, resTSolveFirstSoln = 0.0, resLenFirstSoln = 0, resRefinementSteps = 0, resTransitions = [], resTypes = [], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Baseline", queryName = "Q34", queryStr = "List (Either a b) -> Either a (List (b))", result = Result {resSolutionOrError = Right "Just Data.Either.Right (Data.Either.rights arg0)", resTFirstSoln = 37.759180838, resTEncFirstSoln = 6.543305172, resTSolveFirstSoln = 31.201470923, resLenFirstSoln = 2, resRefinementSteps = 31, resTransitions = [1961,1961,1961,1961,1961,1961,1961,1961,1961,1961,1961,1961,1961,1961,1961,1961,1961,1961,1961,1961,1961,1961,1961,1961,1961,1961,1961,1961,1961,1961,1961], resTypes = [28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Zero Cover Start", queryName = "Q34", queryStr = "List (Either a b) -> Either a (List (b))", result = Result {resSolutionOrError = Left Timeout, resTFirstSoln = 0.0, resTEncFirstSoln = 0.0, resTSolveFirstSoln = 0.0, resLenFirstSoln = 0, resRefinementSteps = 0, resTransitions = [], resTypes = [], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Stop Early", queryName = "Q34", queryStr = "List (Either a b) -> Either a (List (b))", result = Result {resSolutionOrError = Right "Just Data.Either.Right (Data.Either.rights arg0)", resTFirstSoln = 34.046948193999995, resTEncFirstSoln = 5.169552587999999, resTSolveFirstSoln = 25.322619770999996, resLenFirstSoln = 2, resRefinementSteps = 41, resTransitions = [1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1211,995,865,800,750,638,470,404,352,238], resTypes = [20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,17,14,12,11,10,8,6,5,4,3], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Zero Cover with Stop Early", queryName = "Q34", queryStr = "List (Either a b) -> Either a (List (b))", result = Result {resSolutionOrError = Right "Just Data.Either.Right (Data.Either.rights arg0)", resTFirstSoln = 36.189959645, resTEncFirstSoln = 5.0839383410000005, resTSolveFirstSoln = 27.186071247, resLenFirstSoln = 2, resRefinementSteps = 38, resTransitions = [1541,1541,1541,1541,1541,1541,1541,1541,1541,1541,1541,1541,1541,1541,1541,1541,1541,1541,1541,1541,1541,1541,1541,1541,1541,1541,1541,1230,1008,804,682,568,523,451,393,355,249,170], resTypes = [20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,18,15,12,10,8,7,6,5,4,2,1], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "No Gar", queryName = "Q34", queryStr = "List (Either a b) -> Either a (List (b))", result = Result {resSolutionOrError = Right "Just Data.Either.Right (Data.Either.rights arg0)", resTFirstSoln = 4.419344408, resTEncFirstSoln = 0.10461332799999999, resTSolveFirstSoln = 4.189617047999999, resLenFirstSoln = 2, resRefinementSteps = 399, resTransitionsresTypes = [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Query Refinement", queryName = "Q37", queryStr = "a -> List String -> String", result = Result {resSolutionOrError = Right "Just Text.Show.show ((,) arg1 arg0)", resTFirstSoln = 2.166920775, resTEncFirstSoln = 0.383085161, resTSolveFirstSoln = 1.678167401, resLenFirstSoln = 2, resRefinementSteps = 3, resTransitions = [417,347,319], resTypes = [7,5,4], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Baseline", queryName = "Q37", queryStr = "a -> List String -> String", result = Result {resSolutionOrError = Right "Just Text.Show.shows arg1 (Text.Show.show arg0)", resTFirstSoln = 12.976268238, resTEncFirstSoln = 5.814415576, resTSolveFirstSoln = 7.158569104, resLenFirstSoln = 2, resRefinementSteps = 3, resTransitions = [1878,1878,1878], resTypes = [27,27,27], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Zero Cover Start", queryName = "Q37", queryStr = "a -> List String -> String", result = Result {resSolutionOrError = Right "Just Text.Show.show ((,) arg1 arg0)", resTFirstSoln = 0.796269629, resTEncFirstSoln = 0.25843466700000006, resTSolveFirstSoln = 0.449716189, resLenFirstSoln = 2, resRefinementSteps = 5, resTransitions = [322,261,237,188,170], resTypes = [6,4,3,2,1], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Stop Early", queryName = "Q37", queryStr = "a -> List String -> String", result = Result {resSolutionOrError = Right "Just Text.Show.show ((,) arg1 arg0)", resTFirstSoln = 2.128507874, resTEncFirstSoln = 0.380093315, resTSolveFirstSoln = 1.6434905469999999, resLenFirstSoln = 2, resRefinementSteps = 3, resTransitions = [417,347,319], resTypes = [7,5,4], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Zero Cover with Stop Early", queryName = "Q37", queryStr = "a -> List String -> String", result = Result {resSolutionOrError = Right "Just Text.Show.show ((,) arg0 arg1)", resTFirstSoln = 1.12074022, resTEncFirstSoln = 0.17451919899999999, resTSolveFirstSoln = 0.891472481, resLenFirstSoln = 2, resRefinementSteps = 4, resTransitions = [287,237,188,170], resTypes = [5,3,2,1], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "No Gar", queryName = "Q37", queryStr = "a -> List String -> String", result = Result {resSolutionOrError = Right "Just Text.Show.shows arg0 (Text.Show.show arg1)", resTFirstSoln = 1.741956314, resTEncFirstSoln = 0.19029554499999998, resTSolveFirstSoln = 1.5273358279999996, resLenFirstSoln = 2, resRefinementSteps = 83, resTransitions = [319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319], resTypes = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Query Refinement", queryName = "Q38", queryStr = "List (Pair a b) -> a -> b", result = Result {resSolutionOrError = Left Timeout, resTFirstSoln = 0.0, resTEncFirstSoln = 0.0, resTSolveFirstSoln = 0.0, resLenFirstSoln = 0, resRefinementSteps = 0, resTransitions = [], resTypes = [], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Baseline", queryName = "Q38", queryStr = "List (Pair a b) -> a -> b", result = Result {resSolutionOrError = Left Timeout, resTFirstSoln = 0.0, resTEncFirstSoln = 0.0, resTSolveFirstSoln = 0.0, resLenFirstSoln = 0, resRefinementSteps = 0, resTransitions = [], resTypes = [], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Zero Cover Start", queryName = "Q38", queryStr = "List (Pair a b) -> a -> b", result = Result {resSolutionOrError = Left Timeout, resTFirstSoln = 0.0, resTEncFirstSoln = 0.0, resTSolveFirstSoln = 0.0, resLenFirstSoln = 0, resRefinementSteps = 0, resTransitions = [], resTypes = [], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Stop Early", queryName = "Q38", queryStr = "List (Pair a b) -> a -> b", result = Result {resSolutionOrError = Left Timeout, resTFirstSoln = 0.0, resTEncFirstSoln = 0.0, resTSolveFirstSoln = 0.0, resLenFirstSoln = 0, resRefinementSteps = 0, resTransitions = [], resTypes = [], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Zero Cover with Stop Early", queryName = "Q38", queryStr = "List (Pair a b) -> a -> b", result = Result {resSolutionOrError = Left Timeout, resTFirstSoln = 0.0, resTEncFirstSoln = 0.0, resTSolveFirstSoln = 0.0, resLenFirstSoln = 0, resRefinementSteps = 0, resTransitions = [], resTypes = [], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "No Gar", queryName = "Q38", queryStr = "List (Pair a b) -> a -> b", result = Result {resSolutionOrError = Left Timeout, resTFirstSoln = 0.0, resTEncFirstSoln = 0.0, resTSolveFirstSoln = 0.0, resLenFirstSoln = 0, resRefinementSteps = 0, resTransitions = [], resTypes = [], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Query Refinement", queryName = "Q40", queryStr = "(a -> b) -> List (a) -> List (a,b)", result = Result {resSolutionOrError = Left Timeout, resTFirstSoln = 0.0, resTEncFirstSoln = 0.0, resTSolveFirstSoln = 0.0, resLenFirstSoln = 0, resRefinementSteps = 0, resTransitions = [], resTypes = [], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Baseline", queryName = "Q40", queryStr = "(a -> b) -> List (a) -> List (a,b)", result = Result {resSolutionOrError = Left Timeout, resTFirstSoln = 0.0, resTEncFirstSoln = 0.0, resTSolveFirstSoln = 0.0, resLenFirstSoln = 0, resRefinementSteps = 0, resTransitions = [], resTypes = [], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Zero Cover Start", queryName = "Q40", queryStr = "(a -> b) -> List (a) -> List (a,b)", result = Result {resSolutionOrError = Left Timeout, resTFirstSoln = 0.0, resTEncFirstSoln = 0.0, resTSolveFirstSoln = 0.0, resLenFirstSoln = 0, resRefinementSteps = 0, resTransitions = [], resTypes = [], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Stop Early", queryName = "Q40", queryStr = "(a -> b) -> List (a) -> List (a,b)", result = Result {resSolutionOrError = Left Timeout, resTFirstSoln = 0.0, resTEncFirstSoln = 0.0, resTSolveFirstSoln = 0.0, resLenFirstSoln = 0, resRefinementSteps = 0, resTransitions = [], resTypes = [], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Zero Cover with Stop Early", queryName = "Q40", queryStr = "(a -> b) -> List (a) -> List (a,b)", result = Result {resSolutionOrError = Left Timeout, resTFirstSoln = 0.0, resTEncFirstSoln = 0.0, resTSolveFirstSoln = 0.0, resLenFirstSoln = 0, resRefinementSteps = 0, resTransitions = [], resTypes = [], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "No Gar", queryName = "Q40", queryStr = "(a -> b) -> List (a) -> List (a,b)", result = Result {resSolutionOrError = Left Timeout, resTFirstSoln = 0.0, resTEncFirstSoln = 0.0, resTSolveFirstSoln = 0.0, resLenFirstSoln = 0, resRefinementSteps = 0, resTransitions = [], resTypes = [], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Query Refinement", queryName = "Q41", queryStr = "List (a) -> List (b) -> List (List (Pair a b))", result = Result {resSolutionOrError = Left Timeout, resTFirstSoln = 0.0, resTEncFirstSoln = 0.0, resTSolveFirstSoln = 0.0, resLenFirstSoln = 0, resRefinementSteps = 0, resTransitions = [], resTypes = [], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Baseline", queryName = "Q41", queryStr = "List (a) -> List (b) -> List (List (Pair a b))", result = Result {resSolutionOrError = Left Timeout, resTFirstSoln = 0.0, resTEncFirstSoln = 0.0, resTSolveFirstSoln = 0.0, resLenFirstSoln = 0, resRefinementSteps = 0, resTransitions = [], resTypes = [], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Zero Cover Start", queryName = "Q41", queryStr = "List (a) -> List (b) -> List (List (Pair a b))", result = Result {resSolutionOrError = Right "Just (:) (GHC.List.zip arg1 arg0) []", resTFirstSoln = 81.505863964, resTEncFirstSoln = 7.971025502, resTSolveFirstSoln = 72.37827227, resLenFirstSoln = 3, resRefinementSteps = 12, resTransitions = [1564,1166,947,898,816,766,577,443,411,319,249,170], resTypes = [13,11,10,9,8,7,6,5,4,3,2,1], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Stop Early", queryName = "Q41", queryStr = "List (a) -> List (b) -> List (List (Pair a b))", result = Result {resSolutionOrError = Left Timeout, resTFirstSoln = 0.0, resTEncFirstSoln = 0.0, resTSolveFirstSoln = 0.0, resLenFirstSoln = 0, resRefinementSteps = 0, resTransitions = [], resTypes = [], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "Zero Cover with Stop Early", queryName = "Q41", queryStr = "List (a) -> List (b) -> List (List (Pair a b))", result = Result {resSolutionOrError = Left Timeout, resTFirstSoln = 0.0, resTEncFirstSoln = 0.0, resTSolveFirstSoln = 0.0, resLenFirstSoln = 0, resRefinementSteps = 0, resTransitions = [], resTypes = [], resDuplicateSymbols = (0,0)}},ResultSummary {envName = "Total", paramName = "No Gar", queryName = "Q41", queryStr = "List (a) -> List (b) -> List (List (Pair a b))", result = Result {resSolutionOrError = Left Timeout, resTFirstSoln = 0.0, resTEncFirstSoln = 0.0, resTSolveFirstSoln = 0.0, resLenFirstSoln = 0, resRefinementSteps = 0, resTransitions = [], resTypes = [], resDuplicateSymbols = (0,0)}}]
